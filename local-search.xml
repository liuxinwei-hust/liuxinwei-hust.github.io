<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>p99时延统计</title>
    <link href="/2024/04/03/p99%E6%97%B6%E5%BB%B6%E7%BB%9F%E8%AE%A1/"/>
    <url>/2024/04/03/p99%E6%97%B6%E5%BB%B6%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="性能数据"><a href="#性能数据" class="headerlink" title="性能数据"></a>性能数据</h1><p>一般统计后端数据库的性能指标有最大时延，平均时延，但还有个更重要的指标即P99时延，99%的用户落在哪个时延区间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Latency</span>    Number of requests<br><span class="hljs-attribute">1s</span>         <span class="hljs-number">5</span><br><span class="hljs-attribute">2s</span>         <span class="hljs-number">5</span><br><span class="hljs-attribute">3s</span>         <span class="hljs-number">10</span><br><span class="hljs-attribute">4s</span>         <span class="hljs-number">40</span><br><span class="hljs-attribute">5s</span>         <span class="hljs-number">20</span><br><span class="hljs-attribute">6s</span>         <span class="hljs-number">15</span><br><span class="hljs-attribute">7s</span>         <span class="hljs-number">4</span><br><span class="hljs-attribute">8s</span>         <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>比如100个请求，第99个请求落在了7s这个区间,那么p99就是7秒,而不是前99个请求的平均时延</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>对时间划分区间，统计落在每个区间的请求数，和总时延</li><li>每秒根据请求总数计算第99%的请求落在哪个时延区间</li><li>计算时延区间的平均时延</li></ul><p>比如，数据库的大部分时延在毫秒级，如此划分时延区间</p><ul><li>时延 [0-20ms)的1ms一个桶，总共20个桶</li><li>时延 [20ms-200ms)的时候10ms一个桶，总共18个桶</li><li>时延 [200ms-1000ms)50ms一个桶，总共16个桶</li><li>时延 [1000ms+) 总共一个桶</li></ul><p>某个请求的时延落在哪个桶类，则该桶中的请求总数++，时延总数++ （下章节的SetP99Delay函数）;每秒根据请求总数的99%,落在哪个时延区间,计算时延区间的平均时延（下章节的GetP99Delay函数）</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>某监控统计实现，计算p99和获取p99关注函数</p><ul><li>SetP99Delay</li><li>GetP99Delay</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// .h头文件</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_20MS_SIZE 20    <span class="hljs-comment">// [0-20ms)的1ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_200MS_SIZE 18   <span class="hljs-comment">// [20ms-200ms)的时候10ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_1000MS_SIZE 16  <span class="hljs-comment">// [200ms-1000ms)50ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_OTHER_SIZE 1    <span class="hljs-comment">// [1000ms+) 一个桶</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bucket</span> &#123;<br>  <span class="hljs-type">int64_t</span> totalDelay;<br>  <span class="hljs-type">int64_t</span> count;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monitor</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Monitor</span>();<br>  ~<span class="hljs-built_in">Monitor</span>();<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Init</span><span class="hljs-params">(std::string cmd)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncSendErrCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_sendCount++;<br>    m_sendErrCount++;<br><br>    m_sendSumCount++;<br>    m_sendErrSumCount++;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncSendSuccCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_sendCount++;<br><br>    m_sendSumCount++;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncRecvErrCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_recvErrCount++;<br>    m_recvCount++;<br><br>    m_recvSumCount++;<br>    m_recvErrSumCount++;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncRecvSuccCount</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span> </span>&#123;<br>    m_recvCount++;<br>    m_recvSumCount++;<br>    <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    m_totalDelay += delay;<br>    m_delayCount++;<br>    m_totalSumDelay += delay;<br>    m_delaySumCount++;<br>    <span class="hljs-keyword">if</span> (m_maxDelay &lt; delay) &#123;<br>      m_maxDelay = delay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m_maxSumDelay &lt; delay) &#123;<br>      m_maxSumDelay = delay;<br>    &#125;<br>    <span class="hljs-built_in">SetP99Delay</span>(delay);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> curTimeMs)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reset</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> &amp;p99Delay, <span class="hljs-type">int64_t</span> &amp;p999Delay, <span class="hljs-type">int64_t</span> &amp;p9999Delay)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// period</span><br>  std::string m_cmd;<br>  <span class="hljs-type">int64_t</span> m_sendCount;<br>  <span class="hljs-type">int64_t</span> m_sendErrCount;<br>  <span class="hljs-type">int64_t</span> m_recvCount;<br>  <span class="hljs-type">int64_t</span> m_recvErrCount;<br>  <span class="hljs-type">int64_t</span> m_delayCount;<br>  <span class="hljs-type">int64_t</span> m_totalDelay;  <span class="hljs-comment">// us</span><br>  <span class="hljs-type">int64_t</span> m_maxDelay;    <span class="hljs-comment">// us</span><br><br>  <span class="hljs-comment">// sum</span><br>  <span class="hljs-type">int64_t</span> m_sendSumCount;<br>  <span class="hljs-type">int64_t</span> m_sendErrSumCount;<br>  <span class="hljs-type">int64_t</span> m_recvSumCount;<br>  <span class="hljs-type">int64_t</span> m_recvErrSumCount;<br>  <span class="hljs-type">int64_t</span> m_delaySumCount;<br>  <span class="hljs-type">int64_t</span> m_totalSumDelay;  <span class="hljs-comment">// us</span><br>  <span class="hljs-type">int64_t</span> m_maxSumDelay;    <span class="hljs-comment">// us</span><br><br>  <span class="hljs-comment">// P99计算，越小越精确</span><br>  <span class="hljs-comment">// [0-20ms)的1ms一个桶，[20ms-200ms)的时候10ms一个桶</span><br>  <span class="hljs-comment">// [200ms-1000ms)50ms一个桶，[1000ms+)单独一个桶</span><br>  Bucket m_20MSBucket[BUCKET_20MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_20MSTotalRecvCount;<br>  Bucket m_200MSBucket[BUCKET_200MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_200MSTotalRecvCount;<br>  Bucket m_1000MSBucket[BUCKET_1000MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_1000MSTotalRecvCount;<br>  Bucket m_otherBucket;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// .cpp文件</span><br>Monitor::<span class="hljs-built_in">Monitor</span>() &#123;<br>  m_sendSumCount = <span class="hljs-number">0</span>;<br>  m_sendErrSumCount = <span class="hljs-number">0</span>;<br>  m_recvSumCount = <span class="hljs-number">0</span>;<br>  m_recvErrSumCount = <span class="hljs-number">0</span>;<br>  m_delaySumCount = <span class="hljs-number">0</span>;<br>  m_totalSumDelay = <span class="hljs-number">0</span>;<br>  m_maxSumDelay = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">Reset</span>();<br>&#125;<br><br>Monitor::~<span class="hljs-built_in">Monitor</span>() &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Monitor::Init</span><span class="hljs-params">(std::string cmd)</span> </span>&#123;<br>  m_cmd = cmd;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::Reset</span><span class="hljs-params">()</span> </span>&#123;<br>  m_sendCount = <span class="hljs-number">0</span>;<br>  m_sendErrCount = <span class="hljs-number">0</span>;<br>  m_recvCount = <span class="hljs-number">0</span>;<br>  m_recvErrCount = <span class="hljs-number">0</span>;<br>  m_delayCount = <span class="hljs-number">0</span>;<br>  m_totalDelay = <span class="hljs-number">0</span>;<br>  m_maxDelay = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">memset</span>(m_20MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_20MSBucket));<br>  m_20MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(m_200MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_200MSBucket));<br>  m_200MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(m_1000MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_1000MSBucket));<br>  m_1000MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;m_otherBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_otherBucket));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::SetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">20000LL</span>) &#123;<br>    <span class="hljs-comment">// [0-20ms)的1ms一个桶</span><br>    m_20MSBucket[delay / <span class="hljs-number">1000LL</span>].count++;<br>    m_20MSBucket[delay / <span class="hljs-number">1000LL</span>].totalDelay += delay;<br>    m_20MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">200000LL</span>) &#123;<br>    <span class="hljs-comment">// [20ms-200ms)的时候10ms一个桶</span><br>    m_200MSBucket[(delay - <span class="hljs-number">20000LL</span>) / <span class="hljs-number">10000LL</span>].count++;<br>    m_200MSBucket[(delay - <span class="hljs-number">20000LL</span>) / <span class="hljs-number">10000LL</span>].totalDelay += delay;<br>    m_200MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">1000000LL</span>) &#123;<br>    <span class="hljs-comment">// [200ms-1000ms)50ms一个桶</span><br>    m_1000MSBucket[(delay - <span class="hljs-number">200000LL</span>) / <span class="hljs-number">50000LL</span>].count++;<br>    m_1000MSBucket[(delay - <span class="hljs-number">200000LL</span>) / <span class="hljs-number">50000LL</span>].totalDelay += delay;<br>    m_1000MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    m_otherBucket.count++;<br>    m_otherBucket.totalDelay += delay;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::GetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> &amp;p99Delay, <span class="hljs-type">int64_t</span> &amp;p999Delay, <span class="hljs-type">int64_t</span> &amp;p9999Delay)</span> </span>&#123;<br>  p99Delay = <span class="hljs-number">0</span>;<br>  p999Delay = <span class="hljs-number">0</span>;<br>  p9999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (m_delayCount &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-type">int64_t</span> p99Count = m_delayCount * <span class="hljs-number">99</span> / <span class="hljs-number">100</span>;<br>  <span class="hljs-type">int64_t</span> p999Count = m_delayCount * <span class="hljs-number">999</span> / <span class="hljs-number">1000</span>;<br>  <span class="hljs-type">int64_t</span> p9999Count = m_delayCount * <span class="hljs-number">9999</span> / <span class="hljs-number">10000</span>;<br>  <span class="hljs-built_in">DEBUG_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>            <span class="hljs-string">&quot;p99Count:&#123;&#125; p999Count:&#123;&#125;  p9999Count:&#123;&#125; m_20MSTotalRecvCount:&#123;&#125; m_200MSTotalRecvCount:&#123;&#125; &quot;</span><br>            <span class="hljs-string">&quot;m_1000MSTotalRecvCount:&#123;&#125;, m_otherBucket:&#123;&#125;&quot;</span>,<br>            p99Count,<br>            p999Count,<br>            p9999Count,<br>            m_20MSTotalRecvCount,<br>            m_200MSTotalRecvCount,<br>            m_1000MSTotalRecvCount,<br>            m_otherBucket.count);<br>  <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [0-20ms)的1ms一个桶 m_20MSBucket</span><br>    <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_20MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_20MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_20MSBucket[pos].count;<br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_200MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [20ms-200ms)的时候10ms一个桶 m_200MSBucket</span><br>    <span class="hljs-type">int</span> total = m_20MSTotalRecvCount;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_200MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_200MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_200MSBucket[pos].count;<br><br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_1000MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [200ms-1000ms)50ms一个桶 m_1000MSBucket</span><br>    <span class="hljs-type">int</span> total = m_20MSTotalRecvCount + m_200MSTotalRecvCount;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_1000MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_1000MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_1000MSBucket[pos].count;<br><br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount + m_1000MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount + m_1000MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_otherBucket.count &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-type">int64_t</span> otherAvgDelay = m_otherBucket.totalDelay / m_otherBucket.count;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p99Delay) &#123;<br>      p99Delay = otherAvgDelay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p999Delay) &#123;<br>      p999Delay = otherAvgDelay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p9999Delay) &#123;<br>      p9999Delay = otherAvgDelay;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">DEBUG_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(), <span class="hljs-string">&quot;p9999Delay:&#123;&#125;&quot;</span>, p9999Delay);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::Print</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> curTimeMs)</span> </span>&#123;<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-type">int64_t</span> qps = m_sendCount - m_sendErrCount;<br>  <span class="hljs-type">int64_t</span> avgDelay = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (m_delayCount &gt; <span class="hljs-number">0</span>) &#123;<br>    avgDelay = m_totalDelay / m_delayCount;<br>  &#125;<br>  <span class="hljs-type">int64_t</span> p99Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int64_t</span> p999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int64_t</span> p9999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">GetP99Delay</span>(p99Delay, p999Delay, p9999Delay);<br><br>  <span class="hljs-keyword">if</span> (m_cmd.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-comment">// total</span><br>    <span class="hljs-type">time_t</span> now = curTimeMs / <span class="hljs-number">1000</span>;<br>    tm *ltm = <span class="hljs-built_in">localtime</span>(&amp;now);<br>    <span class="hljs-built_in">printf</span>(<br>        <span class="hljs-string">&quot;&#123;\&quot;time\&quot;:\&quot;%d-%.2d-%.2d %.2d:%.2d:%.2d\&quot;,\&quot;qps\&quot;:%ld, &quot;</span><br>        <span class="hljs-string">&quot;\&quot;request_count\&quot;:%ld,\&quot;success_count\&quot;:%ld,\&quot;failed_count\&quot;:%ld,\&quot;average_delay\&quot;:\&quot;%ld.%ldms\&quot;,&quot;</span><br>        <span class="hljs-string">&quot;\&quot;maximum_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p99_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p999_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p9999_&quot;</span><br>        <span class="hljs-string">&quot;delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;metrics_by_command\&quot;:[&quot;</span>,<br>        <span class="hljs-number">1900</span> + ltm-&gt;tm_year,<br>        <span class="hljs-number">1</span> + ltm-&gt;tm_mon,<br>        ltm-&gt;tm_mday,<br>        ltm-&gt;tm_hour,<br>        ltm-&gt;tm_min,<br>        ltm-&gt;tm_sec,<br>        qps,<br>        qps,<br>        (m_recvCount - m_recvErrCount),<br>        (m_recvErrCount + m_sendErrCount),<br>        avgDelay / <span class="hljs-number">1000</span>,<br>        avgDelay % <span class="hljs-number">1000</span>,<br>        m_maxDelay / <span class="hljs-number">1000</span>,<br>        m_maxDelay % <span class="hljs-number">1000</span>,<br>        p99Delay / <span class="hljs-number">1000</span>,<br>        p99Delay % <span class="hljs-number">1000</span>,<br>        p999Delay / <span class="hljs-number">1000</span>,<br>        p999Delay % <span class="hljs-number">1000</span>,<br>        p9999Delay / <span class="hljs-number">1000</span>,<br>        p9999Delay % <span class="hljs-number">1000</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>             <span class="hljs-string">&quot;QPS:&#123;&#125; CMD:&#123;&#125; SendSucc:&#123;&#125; SendErr:&#123;&#125; Recv:&#123;&#125; RecvErr:&#123;&#125; AvgDelay:&#123;&#125;us MaxDelay:&#123;&#125;us &quot;</span><br>             <span class="hljs-string">&quot;P99Delay:&#123;&#125;us P999Delay:&#123;&#125;us P9999Delay:&#123;&#125;us&quot;</span>,<br>             qps,<br>             m_cmd.<span class="hljs-built_in">c_str</span>(),<br>             qps,<br>             m_sendErrCount,<br>             (m_recvCount - m_recvErrCount),<br>             m_recvErrCount,<br>             avgDelay,<br>             m_maxDelay,<br>             p99Delay,<br>             p999Delay,<br>             p9999Delay);<br>    <span class="hljs-built_in">printf</span>(<br>        <span class="hljs-string">&quot;&#123;\&quot;command\&quot;:\&quot;%s\&quot;,\&quot;qps\&quot;:%ld, &quot;</span><br>        <span class="hljs-string">&quot;\&quot;request_count\&quot;:%ld,\&quot;success_count\&quot;:%ld,\&quot;failed_count\&quot;:%ld,\&quot;average_delay\&quot;:\&quot;%ld.%ldms\&quot;,&quot;</span><br>        <span class="hljs-string">&quot;\&quot;maximum_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p99_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p999_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p9999_&quot;</span><br>        <span class="hljs-string">&quot;delay\&quot;:\&quot;%ld.%ldms\&quot;&#125;&quot;</span>,<br>        m_cmd.<span class="hljs-built_in">c_str</span>(),<br>        qps,<br>        qps,<br>        (m_recvCount - m_recvErrCount),<br>        (m_recvErrCount + m_sendErrCount),<br>        avgDelay / <span class="hljs-number">1000</span>,<br>        avgDelay % <span class="hljs-number">1000</span>,<br>        m_maxDelay / <span class="hljs-number">1000</span>,<br>        m_maxDelay % <span class="hljs-number">1000</span>,<br>        p99Delay / <span class="hljs-number">1000</span>,<br>        p99Delay % <span class="hljs-number">1000</span>,<br>        p999Delay / <span class="hljs-number">1000</span>,<br>        p999Delay % <span class="hljs-number">1000</span>,<br>        p9999Delay / <span class="hljs-number">1000</span>,<br>        p9999Delay % <span class="hljs-number">1000</span>);<br>  &#125;<br>  <span class="hljs-built_in">Reset</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>压测</tag>
      
      <tag>P99时延计算</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go性能</title>
    <link href="/2024/03/29/go%E6%80%A7%E8%83%BD/"/>
    <url>/2024/03/29/go%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h1><p>Go 语言自带的 pprof 库就可以分析程序的运行情况，并且提供可视化的功能。可以通过报告生成、Web 可视化界面、交互式终端三种方式来使用 pprof。它包含两个相关的库：</p><ul><li>runtime&#x2F;pprof对于只跑一次的程序，调用 pprof 包提供的函数，手动开启性能数据采集。</li><li>net&#x2F;http&#x2F;pprof对于持续运行的在线服务，访问 pprof 提供的 HTTP 接口，获得性能数据。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    http.ListenAndServe(<span class="hljs-string">&quot;127.0.0.1:6060&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;()<br><br></code></pre></td></tr></table></figure></li></ul><p>下载 cpu profile，默认从当前开始收集 30s 的 cpu 使用情况，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> tool pprof http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/profile?seconds=30</span><br></code></pre></td></tr></table></figure><p>等待30s生成cpu的报告文件，pprof.tdrAgent.samples.cpu，并默认进入终端交互模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> tool pprof -http=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">32000</span> pprof.tdrAgent.samples.cpu<span class="hljs-number">.002</span>.pb.gz<br></code></pre></td></tr></table></figure><p>对生成的报告启动web接口可视化，生成调用堆栈的火焰图，火焰图的每个函数均可点击，查看更深层的堆栈和cpu占用百分比</p>]]></content>
    
    
    <categories>
      
      <category>GO代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>压测</tag>
      
      <tag>性能采集</tag>
      
      <tag>Go</tag>
      
      <tag>pprof</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Perf采集</title>
    <link href="/2024/03/29/Perf%E9%87%87%E9%9B%86/"/>
    <url>/2024/03/29/Perf%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Perf"><a href="#Perf" class="headerlink" title="Perf"></a>Perf</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">perf <span class="hljs-keyword">record</span> -e cpu-clock -g -p <span class="hljs-number">2548</span><br><br>-g 选项是告诉perf <span class="hljs-keyword">record</span>额外记录函数的调用关系<br><br>-e cpu-clock 指perf <span class="hljs-keyword">record</span>监控的指标为cpu周期<br><br>-p 指定需要<span class="hljs-keyword">record</span>的进程pid<br></code></pre></td></tr></table></figure><p>程序运行完之后，perf record会生成一个名为perf.data的文件，如果之前已有，那么之前的perf.data文件会被覆盖</p><p>获得这个perf.data文件之后，就需要perf report工具进行查看</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">perf</span> re<span class="hljs-keyword">port</span> -i perf.data<br></code></pre></td></tr></table></figure><h1 id="使用火焰图展示结果"><a href="#使用火焰图展示结果" class="headerlink" title="使用火焰图展示结果"></a>使用火焰图展示结果</h1><p>Flame Graph项目位于GitHub上：git clone <a href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph</a></p><p>以perf为例，看一下flamegraph的使用方法：</p><ul><li><p>第一步</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">perf <span class="hljs-keyword">record</span> -e cpu-clock -g -p <span class="hljs-number">28591</span><br></code></pre></td></tr></table></figure><p>Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data.</p></li><li><p>第二步</p></li></ul><p>用perf script工具对perf.data进行解析</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">perf</span> script -i perf.<span class="hljs-class"><span class="hljs-keyword">data</span> &amp;&gt; perf.unfold</span><br></code></pre></td></tr></table></figure><ul><li>第三步</li></ul><p>将perf.unfold中的符号进行折叠：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./stackcollapse-perf<span class="hljs-selector-class">.pl</span> perf<span class="hljs-selector-class">.unfold</span> &amp;&gt; perf.folded<br></code></pre></td></tr></table></figure><ul><li>最后生成svg图：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./flamegraph<span class="hljs-selector-class">.pl</span> perf<span class="hljs-selector-class">.folded</span> &gt; perf.svg<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>压测</tag>
      
      <tag>perf</tag>
      
      <tag>性能采集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬盘分区备份</title>
    <link href="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/"/>
    <url>/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="文件拷贝VS扇区拷贝"><a href="#文件拷贝VS扇区拷贝" class="headerlink" title="文件拷贝VS扇区拷贝"></a>文件拷贝VS扇区拷贝</h1><p>当更换硬盘进行数据备份时，最简单的搞法是Ctrl+C Ctrl+V，但还有种更快的备份方式，即物理备份，直接读硬盘扇区，将硬盘中用到的扇区全部备份，本文即介绍如何通过扇区将分区备份成文件<br><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/1.png" alt="扇区备份180MB/s"></p><h1 id="硬盘介绍"><a href="#硬盘介绍" class="headerlink" title="硬盘介绍"></a>硬盘介绍</h1><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/2.png" alt="硬盘结构"></p><p>一个硬盘一般有多个盘片，盘片越多存储容量越大，结构如图，这里记录些知识点：</p><ol><li>盘片正反两面都可读写,磁头数是盘片数两倍</li><li>扇区是按顺序编号的，并且是外磁道向内磁道编号，因为外磁道更快，相同大小的数据，外磁道转半圈，内磁道可能需要转1圈</li><li>每次读取的数据可能在不同磁道，换道时延大概10ms， 顺序读取时延和转速相关，换多个磁道是用电梯算法</li><li>磁道与磁道之间有一定的隔离带，防止数据覆盖，但也有磁盘，为提高容量天然互相覆盖，即瓦记录磁盘，但速度慢</li><li>并口比串口快吗，不会，老的磁盘用的并口并不快</li></ol><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/3.png" alt="并口ATA"><br>ATA高级技术附件（ Advanced Technology Attachment ）硬盘一般使用IDE接口，分为PATA硬盘（即parallelATA,并行ATA硬盘接口规范）和SATA硬盘（即serialATA，串行ATA硬盘接口规范).</p><ol><li>串行ATA的时钟频率要比并行的时钟频率高很多 </li><li>抗干扰能力强</li><li>连线更简单，节省成本，你是愿意插16根网线还是一根</li></ol><h1 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h1><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/4.png" alt="MBR"></p><p>当系统开机或者重启，BIOS 加电自检 ( Power On Self Test – POST )，BIOS执行内存地址为 FFFF:0000H 处的跳转指令，跳转到固化在ROM中的自检程序处，对系统硬件(包括内存)进行检查。接着，读取主引导记录(MBR)。BIOS将相应启动设备的第一个扇区(也就是MBR扇区)读入内存地址为0000:7C00H 处。检查0000:7CFEH-0000:7CFFH(MBR的结束标志位)是否等于55AAH，若不等于则转去尝试其他启动设备，如果没有启动设备满足要求则显示”NO ROM BASIC”然后死机，如果发现磁盘中不存在活动分区，则显示类似如下的信息“Remove disk or other media Press any key to restart”</p><h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><p>MBR中的分区表<br><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/5.png" alt="分区表"></p><ul><li>CHS:<br>CHS寻址模式使用的是磁柱号（CYLINDER）、磁头号（HEAD）、扇区号（SECTOR）这三个值来寻址，也就是使用以上分区表结构中的01H，02H处的值来确定分区的起始位置，使用05H和06H处的值来确定分区的结束位置。CHS寻址模式中，磁头数用 8 个二进制位存储, 最大为 256 ;柱面数用10个二进制位存储, 最大为 1024; 扇区数用6个二进制位存储，最大为63 。每个扇区一般是 512个字节。所以磁盘最大容量为: 256 * 1024 * 63 * 512 &#x2F; 1048576 &#x3D; 8064 MB ( 1M &#x3D; 1048576 Bytes)或硬盘厂商常用的单位:256 * 1024 * 63 * 512 &#x2F; 1000000 &#x3D; 8455 MB ( 1M &#x3D; 1000000 Bytes )。在 CHS 寻址方式中, 磁头, 柱面, 扇区的取值范围分别为 0 到 Heads-1,0 到 Cylinders-1, 1 到 Sectors per track (注意是从 1 开始)。因此，CHS寻址的最大空间为8G左右。</li><li>LBA：<br>对于现代大于8.4G的硬盘，CHS已经无法表示, BIOS使用LBA寻址模式，对于超出的部分，CHS的值通常设为 FEFFFF, 并加以忽略，直接使用08H-0FH的8字节相对值来确定分区的起始位置。因此，现在的分区的寻址模式大部分都是使用LBA来寻址，LBA的一个地址使用4个字节来表示，最大为232*512&#x3D;2TB。对于大于2TB的硬盘，如果要完全利用硬盘将使用GTP分区</li></ul><h1 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h1><p>分区中的文件系统类型表：</p><table><thead><tr><th>十六进制值</th><th>意义</th></tr></thead><tbody><tr><td>00h</td><td>未用</td></tr><tr><td>01h</td><td>FAT12</td></tr><tr><td>04h</td><td>FAT16（CHS寻址模式，分区大小最大为32MB）</td></tr><tr><td>05h</td><td>扩展分区（CHS寻址模式）</td></tr><tr><td>06h</td><td>FAT16（CHS寻址模式，分区大小大于32MB）</td></tr><tr><td>07h</td><td>NTFS</td></tr><tr><td>0BH</td><td>FAT32(CHS寻址模式)</td></tr><tr><td>0CH</td><td>FAT32（LBA寻址模式）</td></tr><tr><td>0EH</td><td>FAT15（LBA寻址模式）</td></tr><tr><td>0FH</td><td>扩展分区（LBA寻址模式）</td></tr></tbody></table><p>MBR有四个分区表，四个分区表中可以用来全部描述主分区，或最多只能有一个用来描述扩展分区，其他三个描述主分区。当描述扩展分区时，则分区表的文件系统标志位为0x0F，此分区表描述了一个链表，链表的每个节点称作虚拟MBR，他与MBR有相同的结构，虚拟MBR的分区表1描述了一个逻辑分区，而分区表2指向了下一个节点，其他分区表为空。当虚拟MBR的分区表2为0，则表示链表结束，因此扩展分区中可以分为很多个逻辑分区。</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/6.jpg" alt="扩展分区"></p><h1 id="DBR"><a href="#DBR" class="headerlink" title="DBR"></a>DBR</h1><p>DBR全称为Driver Boot Record，俗称分区引导扇区。在DBR中包含分区引导程序、分区信息记录，比如文件$MFT起始簇、跳转代码、OEM、结束标志等信息。下图为DBR扇区数据：<br>DBR 扇区总共有五部分数据组成，即</p><ol><li>跳转程序，共占3B；</li><li>OEM代号，共占8B；</li><li>BPB数据，共占73B；</li><li>引导程序，共占426B；</li><li>结束标志，数值为 55 AA，占用2B。</li></ol><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/7.png" alt="DBR"></p><h1 id="NTFS文件系统bitmap"><a href="#NTFS文件系统bitmap" class="headerlink" title="NTFS文件系统bitmap"></a>NTFS文件系统bitmap</h1><p><a href="https://blog.51cto.com/dengqi/1351300">NTFS文件系统详细介绍</a><br>只是备份的话，实际不需要了解那么清楚，只需要知道文件系统的位图信息即可知道，哪些扇区被使用了，只用备份这些扇区，$MFT的前16个文件记录总是元文件的，并且顺序是固定不变的</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/8.png" alt="NTFS"></p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/9.png" alt="找Bitmap"></p><ol><li>定位DBR，通过DBR可以得知$MFT的起始簇号及簇的大小。</li><li>定位$MFT，找到$MFT的后，在其中寻找Bitmap的文件记录，在6号文件记录。</li></ol><h1 id="镜像文件"><a href="#镜像文件" class="headerlink" title="镜像文件"></a>镜像文件</h1><p>读取分区的技巧： </p><p>[1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1        ]  </p><p>对于位图中这些连续的1，即连续使用的扇区可以一次读取多个扇区，而不是一个扇区一个扇区读取，减少读取次数。</p><p>将分区读取后按如下的的格式写入文件，即可得到分区的镜像文件:</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/10.jpg" alt="镜像文件"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>读取MBR，找到要备份的分区表</li><li>如果是主分区直接定位到起始扇区</li><li>如果是扩展分区，还要通过拉链指针定位到扩展分区的起始扇区</li><li>通过DBR找到元数据$MFT的位置</li><li>寻找分区Bitmap，记录了哪些扇区被占用</li><li>将扇区读取后按如下的的格式写入镜像文件</li></ol><p>还原则使用相反的方式</p><p><a href="https://github.com/liuxinwei-hust/disk_backup">github virtual studio工程</a></p>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>C++</tag>
      
      <tag>MBR</tag>
      
      <tag>DBR</tag>
      
      <tag>0号扇区</tag>
      
      <tag>分区表</tag>
      
      <tag>分区备份</tag>
      
      <tag>NTFS文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++随机数</title>
    <link href="/2024/03/28/C-%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2024/03/28/C-%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="真随机"><a href="#真随机" class="headerlink" title="真随机"></a>真随机</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-type">uint32_t</span> num = std::random_device&#123;&#125;();<br></code></pre></td></tr></table></figure><h1 id="伪随机"><a href="#伪随机" class="headerlink" title="伪随机"></a>伪随机</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">// 获取32位随机值</span><br><span class="hljs-function"><span class="hljs-type">static</span> std::mt19937 <span class="hljs-title">rand_gen_32</span><span class="hljs-params">(std::random_device&#123;&#125;())</span></span>;<br><span class="hljs-type">uint32_t</span> num = <span class="hljs-built_in">rand_gen_32</span>();<br><br><span class="hljs-comment">// 获取64位随机值</span><br><span class="hljs-function"><span class="hljs-type">static</span> std::mt19937_64 <span class="hljs-title">rand_gen_64</span><span class="hljs-params">(std::random_device&#123;&#125;())</span></span>;<br><span class="hljs-type">uint64_t</span> num = <span class="hljs-built_in">rand_gen_64</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++字符串切割</title>
    <link href="/2024/03/28/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2/"/>
    <url>/2024/03/28/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串切割"><a href="#字符串切割" class="headerlink" title="字符串切割"></a>字符串切割</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StringUtils::SplitString</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; source, <span class="hljs-type">const</span> std::string&amp; delimiter, std::vector&lt;std::string&gt;&amp; vec)</span> </span>&#123;<br>  <span class="hljs-type">size_t</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> index = source.<span class="hljs-built_in">find_first_of</span>(delimiter);<br>  <span class="hljs-keyword">while</span> (index != std::string::npos) &#123;<br>    vec.<span class="hljs-built_in">push_back</span>(source.<span class="hljs-built_in">substr</span>(last, index - last));<br>    last = index + <span class="hljs-number">1</span>;<br>    index = source.<span class="hljs-built_in">find_first_of</span>(delimiter, last);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (std::string::npos == index) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, source.<span class="hljs-built_in">length</span>() - last);<br>    <span class="hljs-keyword">if</span> (!strTmp.<span class="hljs-built_in">empty</span>()) &#123;<br>      vec.<span class="hljs-built_in">push_back</span>(strTmp);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串切割并删除空格"><a href="#字符串切割并删除空格" class="headerlink" title="字符串切割并删除空格"></a>字符串切割并删除空格</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StringUtils::SplitStringWithTrim</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; source,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      <span class="hljs-type">const</span> std::string&amp; delimiter,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      std::vector&lt;std::string&gt;&amp; vec)</span> </span>&#123;<br>  <span class="hljs-type">size_t</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> index = source.<span class="hljs-built_in">find_first_of</span>(delimiter);<br>  <span class="hljs-keyword">while</span> (index != std::string::npos) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, index - last);<br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">trim</span>(strTmp));<br>    last = index + <span class="hljs-number">1</span>;<br>    index = source.<span class="hljs-built_in">find_first_of</span>(delimiter, last);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (std::string::npos == index) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, source.<span class="hljs-built_in">length</span>() - last);<br>    <span class="hljs-keyword">if</span> (!strTmp.<span class="hljs-built_in">empty</span>()) &#123;<br>      vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">trim</span>(strTmp));<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// trim from begin</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">ltrim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123;<br>    s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>(), std::<span class="hljs-built_in">find_if</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">not1</span>(std::<span class="hljs-built_in">ptr_fun</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(std::isspace))));<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">// trim from end</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">rtrim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123;<br>    s.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">find_if</span>(s.<span class="hljs-built_in">rbegin</span>(), s.<span class="hljs-built_in">rend</span>(), std::<span class="hljs-built_in">not1</span>(std::<span class="hljs-built_in">ptr_fun</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(std::isspace))).<span class="hljs-built_in">base</span>(), s.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">// trim from both ends</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">trim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ltrim</span>(<span class="hljs-built_in">rtrim</span>(s)); &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>字符串切割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++获取当前时间</title>
    <link href="/2024/03/28/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/2024/03/28/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="通过gettimeofday获取"><a href="#通过gettimeofday获取" class="headerlink" title="通过gettimeofday获取"></a>通过gettimeofday获取</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int64_t</span> <span class="hljs-title">GetCurrentMilliseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  timeval now;<br>  <span class="hljs-built_in">gettimeofday</span>(&amp;now, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">return</span> now.tv_sec * (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000</span> + now.tv_usec / (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int64_t</span> <span class="hljs-title">GetCurrentMicroseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  timeval now;<br>  <span class="hljs-built_in">gettimeofday</span>(&amp;now, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">return</span> now.tv_sec * (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000000</span> + now.tv_usec;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="通过std-chrono库获取"><a href="#通过std-chrono库获取" class="headerlink" title="通过std::chrono库获取"></a>通过std::chrono库获取</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">TimeUtils::GetCurrentMilliSeconds</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> current_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>();<br>  <span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(current_time).<span class="hljs-built_in">count</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">TimeUtils::GetCurrentMicroseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> current_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>();<br>  <span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(current_time).<span class="hljs-built_in">count</span>();<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">TimeUtils::ToDateString</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> timestamp_ms)</span> </span>&#123;<br>  std::<span class="hljs-type">time_t</span> timestamp = timestamp_ms;<br>  std::stringstream string_stream;<br>  string_stream &lt;&lt; std::<span class="hljs-built_in">put_time</span>(std::<span class="hljs-built_in">localtime</span>(&amp;timestamp), <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>);<br>  <span class="hljs-keyword">return</span> string_stream.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">TimeUtils::ToDatetimeString</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> timestamp_ms)</span> </span>&#123;<br>  std::<span class="hljs-type">time_t</span> timestamp = timestamp_ms;<br>  std::stringstream string_stream;<br>  string_stream &lt;&lt; std::<span class="hljs-built_in">put_time</span>(std::<span class="hljs-built_in">localtime</span>(&amp;timestamp), <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>);<br>  <span class="hljs-keyword">return</span> string_stream.<span class="hljs-built_in">str</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>gettimeofday</tag>
      
      <tag>chrono</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++令牌桶</title>
    <link href="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
    <url>/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><p>最近做个benchmark工具往服务端压测数据，由于服务端的承载能力优先，需要限流进行平滑压测。打算使用令牌桶进行限流。 令牌桶算法以一个设定的速率产生令牌并放入令牌桶，每次用户请求都得申请令牌，如果令牌不足，则拒绝请求。</p><h1 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h1><p>令牌桶算法中新请求到来时会从桶里拿走一个令牌，如果桶内没有令牌可拿，就拒绝服务。当然，令牌的数量也是有上限的。令牌的数量与时间和发放速率强相关，时间流逝的时间越长，会不断往桶里加入越多的令牌，如果令牌发放的速度比申请速度快，令牌桶会放满令牌，直到令牌占满整个令牌桶，如图所示。</p><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/1.png" alt="令牌桶"></p><p>令牌桶限流大致的规则如下：</p><ol><li>进水口按照某个速度，向桶中放入令牌。</li><li>令牌的容量是固定的，但是放行的速度不是固定的，只要桶中还有剩余令牌，一旦请求过来就能申请成功，然后放行。</li><li>如果令牌的发放速度，慢于请求到来速度，桶内就无牌可领，请求就会被拒绝。</li></ol><p>总之，令牌的发送速率可以设置，从而可以对突发的出口流量进行有效的应对。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>比如压测QPS是10000</p><ol><li>那我们设置令牌总数为10000</li><li>每次发送时获取令牌,获取令牌失败，不可发送；获取成功，则令牌总数减一</li><li>每秒重置令牌总数为10000</li></ol><p>这样实现的是个最简单的令牌桶，但是这个令牌桶有个缺陷，如果发送请求不怎么耗时，那么客户端可能在1s的头1ms就将令牌耗尽，后面999ms没有令牌可用，仍然会造成后端流量的不平滑</p><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/2.jpg" alt="不到1s令牌耗尽"></p><h1 id="算法改进1"><a href="#算法改进1" class="headerlink" title="算法改进1"></a>算法改进1</h1><p>1s的时间间隔太久，我们可以将1s按1ms的窗口进行切割<br>比如压测QPS是10000</p><ol><li>将1s按1ms进行切割，1s分成1000个窗口，每个窗口的令牌数10个</li><li>每次发送时，获取令牌,获取令牌失败，不可发送；获取成功，则令牌总数减一</li><li>每过1ms，令牌总数加10</li></ol><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/3.jpg" alt="平滑发送"></p><h1 id="算法改进2"><a href="#算法改进2" class="headerlink" title="算法改进2"></a>算法改进2</h1><p>上面的算法有两个问题：</p><ol><li>如果设置的qps &lt; 1000, 1000个窗口，每个窗口不足1个令牌</li><li>如果设置的qps 是1999呢，除以1000个窗口等于1，余数却有999,每个窗口的令牌是1还是2呢？</li></ol><p>改进：</p><ol><li>如果qps小于等于1000，则将窗口数量设置为qps的大小，每个窗口一个令牌</li><li>如果qps &gt; 1000, 这里的策略是多发，比如1999除以1000个窗口,余数不为0,则先定每个窗口发送2个，同时也要记录已使用的令牌总数，保证1s的令牌总数不超过1999，这样即保证了平滑发送，也不会超过总数</li></ol><h1 id="单线程实现"><a href="#单线程实现" class="headerlink" title="单线程实现"></a>单线程实现</h1><p>实现结果：<br>qps设置为1999：<br><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/3.png" alt="qps限制"><br>1000个窗口，前999个每个窗口2个令牌，最后一个是1个令牌<br><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/4.png" alt="每个窗口的令牌数"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFAULT_WIN_SIZE 1000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Controller</span>() &#123;&#125;<br>  ~<span class="hljs-built_in">Controller</span>() &#123;&#125;<br><br>  <span class="hljs-comment">// 获取令牌</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CanSend</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (cur_us &gt;= m_win_begin_us_ + <span class="hljs-number">1000000LL</span>) &#123;<br>      <span class="hljs-built_in">Reset</span>(cur_us);<br>    &#125;<br><br>    <span class="hljs-comment">// 每个窗口大小 = 1000000LL / m_win_size_</span><br>    <span class="hljs-comment">// 当前落的窗口 = (cur_us - m_win_begin_us_) / 每个窗口大小</span><br>    <span class="hljs-type">int64_t</span> idx = (cur_us - m_win_begin_us_) * (<span class="hljs-type">int64_t</span>)m_win_size_ / <span class="hljs-number">1000000LL</span>;<br>    <span class="hljs-keyword">if</span> (idx &gt;= (<span class="hljs-type">int64_t</span>)m_win_size_ || idx &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 切换了窗口</span><br>    <span class="hljs-keyword">if</span> (idx != m_cur_win_idx_) &#123;<br>      m_cur_win_idx_ = idx;<br>      <span class="hljs-type">int32_t</span> left_token = m_speed_ - m_used_token_;<br>      <span class="hljs-type">int32_t</span> left_win_size = m_win_size_ - m_cur_win_idx_;<br>      m_cur_token_ = left_token / left_win_size;<br>      <span class="hljs-keyword">if</span> (left_token % left_win_size != <span class="hljs-number">0</span>) &#123;<br>        m_cur_token_++;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 令牌不足</span><br>    <span class="hljs-keyword">if</span> (m_cur_token_ &lt;= <span class="hljs-number">0</span> || m_used_token_ &gt;= m_speed_) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// success</span><br>    m_cur_token_--;<br>    m_used_token_++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 设置qps，方便在运行过程中调整qps</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSpeed</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> speed, <span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    m_speed_ = speed;<br>    <span class="hljs-keyword">if</span> (m_speed_ &lt;= DEFAULT_WIN_SIZE) &#123;<br>      m_win_size_ = m_speed_;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      m_win_size_ = DEFAULT_WIN_SIZE;<br>    &#125;<br>    <span class="hljs-built_in">Reset</span>(cur_us);<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// 每s重置令牌桶,重划窗口</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reset</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    m_win_begin_us_ = cur_us;<br>    m_cur_win_idx_ = <span class="hljs-number">0</span>;<br>    m_used_token_ = <span class="hljs-number">0</span>;<br>    m_cur_token_ = m_speed_ / m_win_size_;<br>    <span class="hljs-keyword">if</span> (m_speed_ % m_win_size_ != <span class="hljs-number">0</span>) &#123;<br>      m_cur_token_++;<br>    &#125;<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int32_t</span> m_speed_;       <span class="hljs-comment">// 配置的qps</span><br>  <span class="hljs-type">int32_t</span> m_cur_token_;   <span class="hljs-comment">// 当前可用令牌数</span><br>  <span class="hljs-type">int32_t</span> m_used_token_;  <span class="hljs-comment">//  已使用的令牌数</span><br><br>  <span class="hljs-type">int64_t</span> m_win_begin_us_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 窗口开始时间</span><br>  <span class="hljs-type">int32_t</span> m_cur_win_idx_;       <span class="hljs-comment">// 当前在的窗口编号</span><br>  <span class="hljs-type">int32_t</span> m_win_size_;          <span class="hljs-comment">// 1s分多少个窗口</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>C++</tag>
      
      <tag>benchmark</tag>
      
      <tag>令牌桶</tag>
      
      <tag>压测</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
