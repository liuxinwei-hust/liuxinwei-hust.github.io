<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>周易</title>
    <link href="/2024/04/11/%E5%91%A8%E6%98%93/"/>
    <url>/2024/04/11/%E5%91%A8%E6%98%93/</url>
    
    <content type="html"><![CDATA[<h1 id="阴阳"><a href="#阴阳" class="headerlink" title="阴阳"></a>阴阳</h1><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/0.png" alt="阴阳"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/1.png" alt="两仪四象八卦"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/2.png" alt="伏羲八卦次序图"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/3.png" alt="伏羲六十四卦次序图"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/4.png" alt="伏羲先天六十四卦"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/5.png" alt="周易后天六十四卦"></p><p><img src="/2024/04/11/%E5%91%A8%E6%98%93/6.png" alt="六十四卦编码"></p>]]></content>
    
    
    <categories>
      
      <category>周易</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周易</tag>
      
      <tag>易经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++缓冲区RingBuffer</title>
    <link href="/2024/04/11/C-%E7%BC%93%E5%86%B2%E5%8C%BARingBuffer/"/>
    <url>/2024/04/11/C-%E7%BC%93%E5%86%B2%E5%8C%BARingBuffer/</url>
    
    <content type="html"><![CDATA[<h1 id="Tcp缓存"><a href="#Tcp缓存" class="headerlink" title="Tcp缓存"></a>Tcp缓存</h1><p>通过tcp epoll非阻塞发送请求时，为了提高吞吐量，高性能发送请求，一般会做个发送缓存和接收缓存。即将发送的请求可以在发送缓存里聚合，接收到的响应在接收缓存里聚合，减少系统调用次数。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>将一个大的buffer，通过begin和end两个标记连成环状</p><ul><li>如果end &gt; begin，则它是一个连续的buffer有数据 [begin, end)</li><li>如果end &lt; begin，则它是两段连续的buffer有数据 [0, end)  [begin, cap)</li><li>如果end &#x3D;&#x3D; begin，则整个buffer可能满，可能空，通过empty标记判断</li></ul><h1 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RingBuffer</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">RingBuffer</span>() &#123;&#125;<br><br>  ~<span class="hljs-built_in">RingBuffer</span>() &#123; <span class="hljs-built_in">Fini</span>(); &#125;<br><br>  <span class="hljs-comment">/// @brief 释放内存</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Fini</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (buf_ != <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">delete</span>[] buf_;<br>      buf_ = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    begin_ = <span class="hljs-number">0</span>;<br>    end_ = <span class="hljs-number">0</span>;<br>    empty_ = <span class="hljs-literal">true</span>;<br>    cap_ = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 初始化申请内存</span><br>  <span class="hljs-comment">/// @param min_cap 最小大小</span><br>  <span class="hljs-comment">/// @param max_cap 最大大小</span><br>  <span class="hljs-comment">/// @param logger 日志句柄</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">Init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> min_cap, <span class="hljs-type">uint32_t</span> max_cap, std::shared_ptr&lt;Logger&gt; logger)</span></span>;<br><br>  <span class="hljs-comment">/// @brief 获取当前buffer容量</span><br>  <span class="hljs-comment">/// @return 当前buffer容量</span><br>  <span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">GetCapSize</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> cap_; &#125;<br><br>  <span class="hljs-comment">/// @brief 获取当前已使用大小</span><br>  <span class="hljs-comment">/// @return 已使用大小</span><br>  <span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">GetUsedSize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (empty_) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (end_ &gt; begin_) &#123;<br>      <span class="hljs-keyword">return</span> (end_ - begin_);<br>    &#125;<br>    <span class="hljs-keyword">return</span> (cap_ - begin_ + end_);<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 获取剩余可写入的数据大小容量</span><br>  <span class="hljs-comment">/// @return 可写入容量</span><br>  <span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">GetLeftSize</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (cap_ - <span class="hljs-built_in">GetUsedSize</span>()); &#125;<br><br>  <span class="hljs-comment">/// @brief 清空数据，重置数据游标</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clear</span><span class="hljs-params">()</span> </span>&#123;<br>    begin_ = <span class="hljs-number">0</span>;<br>    end_ = <span class="hljs-number">0</span>;<br>    empty_ = <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 是否有数据</span><br>  <span class="hljs-comment">/// @return bool</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> empty_; &#125;<br><br>  <span class="hljs-comment">/// @brief 是否满</span><br>  <span class="hljs-comment">/// @return bool</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Full</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">GetUsedSize</span>() == cap_); &#125;<br><br>  <span class="hljs-comment">/// @brief 获取可写数据的buffer, 由于数据是可能是分段的，一个完整的buffer可能分为两段，所以用向量数组</span><br>  <span class="hljs-comment">/// @param iovc 向量数组，可写入的内存，外部传入释放</span><br>  <span class="hljs-comment">/// @param count 向量数组大小，入参要&gt;=2</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">GetLeftBuffer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> iovec* iovc, <span class="hljs-type">uint32_t</span>&amp; count)</span></span>;<br><br>  <span class="hljs-comment">/// @brief 获取已使用的数据的buffer, 由于数据是可能是分段的，一个完整的buffer可能分为两段，所以用向量数组</span><br>  <span class="hljs-comment">/// @param iovc 向量数组，已使用的内存，外部传入释放</span><br>  <span class="hljs-comment">/// @param count 向量数组大小，入参要&gt;=2</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">GetUsedBuffer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> iovec* iovc, <span class="hljs-type">uint32_t</span>&amp; count)</span></span>;<br><br>  <span class="hljs-comment">/// @brief 按偏移和大小读取向量数组中的buffer, 如果需要的内存大小跨段了，则拷贝到copy_buffer中；没有跨段则是zerocopy</span><br>  <span class="hljs-comment">/// @param offset 偏移</span><br>  <span class="hljs-comment">/// @param data_buffer_ 数据指针应用，指向真正的数据，内存本结构管理</span><br>  <span class="hljs-comment">/// @param size 需要的大小</span><br>  <span class="hljs-comment">/// @param copy_buffer 如果需要的内存大小跨段了，则拷贝到这个buffer中，内存外部释放</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">ReadBuffer</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> <span class="hljs-type">char</span>*&amp; data_buffer_,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">uint32_t</span> size,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">char</span>* copy_buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">                    std::shared_ptr&lt;Logger&gt; logger = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(copy_buffer == <span class="hljs-literal">nullptr</span>)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;copy_buffer == nullptr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (offset + size &gt; <span class="hljs-built_in">GetUsedSize</span>()) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(<br>          ErrorCode_Code_kDecodeError, <span class="hljs-string">&quot;offset &#123;&#125; + size &#123;&#125; &gt; total_len_ &#123;&#125;&quot;</span>, offset, size, <span class="hljs-built_in">GetUsedSize</span>());<br>    &#125;<br>    <span class="hljs-built_in">TRACE_LOG</span>(logger, <span class="hljs-string">&quot;read offset &#123;&#125; size &#123;&#125;&quot;</span>, offset, size);<br><br>    <span class="hljs-type">uint32_t</span> begin_pos = (begin_ + offset) % cap_;<br>    <span class="hljs-comment">// 没有跨段</span><br>    <span class="hljs-keyword">if</span> (begin_pos + size &lt;= cap_) &#123;<br>      data_buffer_ = buf_ + begin_pos;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 跨段,拷贝读取</span><br>    <span class="hljs-type">uint32_t</span> cp_len = cap_ - begin_pos;<br>    <span class="hljs-built_in">memcpy</span>(copy_buffer, buf_ + begin_pos, cp_len);<br>    <span class="hljs-built_in">memcpy</span>(copy_buffer + cp_len, buf_, size - cp_len);<br>    data_buffer_ = copy_buffer;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 读取数据后，移动begin的数据游标</span><br>  <span class="hljs-comment">/// @param len 读取的数据大小</span><br>  <span class="hljs-function">Status <span class="hljs-title">ShiftReadPos</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(len &lt;= <span class="hljs-number">0</span>)) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-type">uint32_t</span> used_size = <span class="hljs-built_in">GetUsedSize</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(len &gt; used_size)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;read len &#123;&#125; &gt; GetUsedSize &#123;&#125;&quot;</span>, len, used_size);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (len == used_size) &#123;<br>      <span class="hljs-built_in">Clear</span>();<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    begin_ += len;<br>    <span class="hljs-keyword">if</span> (begin_ &gt;= cap_) &#123;<br>      begin_ -= cap_;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 按偏移和大小写入数据</span><br>  <span class="hljs-comment">/// @param offset 偏移</span><br>  <span class="hljs-comment">/// @param data 数据指针，外部释放</span><br>  <span class="hljs-comment">/// @param size 数据的大小</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">WriteBuffer</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* data, <span class="hljs-type">uint32_t</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (offset + size &gt; <span class="hljs-built_in">GetLeftSize</span>()) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(<br>          ErrorCode_Code_kDecodeError, <span class="hljs-string">&quot;offset &#123;&#125; + size &#123;&#125; &gt; total_len_ &#123;&#125;&quot;</span>, offset, size, <span class="hljs-built_in">GetLeftSize</span>());<br>    &#125;<br>    <span class="hljs-type">uint32_t</span> end_pos = (end_ + offset) % cap_;<br>    <span class="hljs-comment">// 没有跨段</span><br>    <span class="hljs-keyword">if</span> (end_pos + size &lt;= cap_) &#123;<br>      <span class="hljs-built_in">memcpy</span>(buf_ + end_pos, data, size);<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 跨段</span><br>    <span class="hljs-type">uint32_t</span> cp_len = cap_ - end_pos;<br>    <span class="hljs-built_in">memcpy</span>(buf_ + end_pos, data, cp_len);<br>    <span class="hljs-built_in">memcpy</span>(buf_, data + cp_len, size - cp_len);<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 写入数据后，移动end的数据游标</span><br>  <span class="hljs-comment">/// @param len 写入数据的大小</span><br>  <span class="hljs-function">Status <span class="hljs-title">ShiftWritePos</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(len &lt;= <span class="hljs-number">0</span>)) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(len &gt; <span class="hljs-built_in">GetLeftSize</span>())) &#123;<br>      <span class="hljs-built_in">RETURN_ERR_NO_LOG</span>(<br>          ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;write len &#123;&#125; &gt; GetLeftSize &#123;&#125;&quot;</span>, len, <span class="hljs-built_in">GetLeftSize</span>());<br>    &#125;<br><br>    empty_ = <span class="hljs-literal">false</span>;<br>    end_ += len;<br>    <span class="hljs-keyword">if</span> (end_ &gt;= cap_) &#123;<br>      end_ -= cap_;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">/// @brief 扩容ringbuffer</span><br>  <span class="hljs-comment">/// @param need_size 需要写入的数据大小,如果传入0,则按倍数扩</span><br>  <span class="hljs-comment">/// @return 错误码</span><br>  <span class="hljs-function">Status <span class="hljs-title">Extend</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> need_size = <span class="hljs-number">0</span>)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">char</span>* buf_ = <span class="hljs-literal">nullptr</span>;<br>  <span class="hljs-type">uint32_t</span> cap_ = <span class="hljs-number">0</span>;      <span class="hljs-comment">// buffer大小</span><br>  <span class="hljs-type">uint32_t</span> min_cap_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 最小容量</span><br>  <span class="hljs-type">uint32_t</span> max_cap_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 最大容量，当写入数据大于cap时，自动扩容</span><br><br>  <span class="hljs-type">uint32_t</span> begin_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 数据起始位置</span><br>  <span class="hljs-type">uint32_t</span> end_ = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 数据结束位置</span><br>  <span class="hljs-type">bool</span> empty_ = <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 当begin == end 时，通过empty_ 判断是空还是满</span><br><br>  std::shared_ptr&lt;Logger&gt; logger_ = <span class="hljs-literal">nullptr</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>CPP</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ring_buffer.h&quot;</span></span><br><br><span class="hljs-function">Status <span class="hljs-title">RingBuffer::Init</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> min_cap, <span class="hljs-type">uint32_t</span> max_cap, std::shared_ptr&lt;Logger&gt; logger)</span> </span>&#123;<br>  logger_ = logger;<br>  <span class="hljs-keyword">if</span> (min_cap &gt; max_cap) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;min_cap &gt; max_cap&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (min_cap &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;min_cap &lt;= 0&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">Fini</span>();<br>  min_cap_ = min_cap;<br>  max_cap_ = max_cap;<br>  buf_ = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[min_cap_];<br>  <span class="hljs-keyword">if</span> (buf_ == <span class="hljs-literal">nullptr</span>) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;new buffer failed, size &#123;&#125;&quot;</span>, min_cap_);<br>  &#125;<br>  cap_ = min_cap_;<br>  <span class="hljs-built_in">DEBUG_LOG</span>(logger_, <span class="hljs-string">&quot;min_cap_ &#123;&#125; max_cap_ &#123;&#125;&quot;</span>, min_cap_, max_cap_);<br>  <span class="hljs-keyword">return</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-function">Status <span class="hljs-title">RingBuffer::GetLeftBuffer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> iovec* iovc, <span class="hljs-type">uint32_t</span>&amp; count)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(iovc == <span class="hljs-literal">nullptr</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;iovc == nullptr&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(count &lt; <span class="hljs-number">2</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;count &lt; 2, iovc invalid&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(<span class="hljs-built_in">Full</span>())) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buffer not enough&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(end_ &gt; cap_)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;end_ &gt; cap_, buffer invalid&quot;</span>);<br>  &#125;<br>  count = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (empty_) &#123;<br>    <span class="hljs-built_in">Clear</span>();<br>    iovc[<span class="hljs-number">0</span>].iov_base = buf_;<br>    iovc[<span class="hljs-number">0</span>].iov_len = cap_;<br>    count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 一段</span><br>  <span class="hljs-keyword">if</span> (end_ &lt;= begin_) &#123;<br>    iovc[<span class="hljs-number">0</span>].iov_base = buf_ + end_;<br>    iovc[<span class="hljs-number">0</span>].iov_len = begin_ - end_;<br>    count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 一般不存在end_ == cap_；当end_ == cap_，重置end_=0</span><br>  iovc[<span class="hljs-number">0</span>].iov_base = buf_ + end_;<br>  iovc[<span class="hljs-number">0</span>].iov_len = cap_ - end_;<br>  count = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 两段</span><br>  <span class="hljs-keyword">if</span> (begin_ != <span class="hljs-number">0</span>) &#123;<br>    iovc[<span class="hljs-number">1</span>].iov_base = buf_;<br>    iovc[<span class="hljs-number">1</span>].iov_len = begin_;<br>    count = <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-function">Status <span class="hljs-title">RingBuffer::GetUsedBuffer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> iovec* iovc, <span class="hljs-type">uint32_t</span>&amp; count)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(iovc == <span class="hljs-literal">nullptr</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;iovc == nullptr&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(count &lt; <span class="hljs-number">2</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;count &lt; 2, iovc invalid&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>  &#125;<br><br>  count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (empty_) &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 一段</span><br>  <span class="hljs-keyword">if</span> (end_ &gt; begin_) &#123;<br>    iovc[<span class="hljs-number">0</span>].iov_base = buf_ + begin_;<br>    iovc[<span class="hljs-number">0</span>].iov_len = (end_ - begin_);<br>    count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 一般不存在begin_ == cap_；当begin_ == cap_，重置end_=0</span><br>  iovc[<span class="hljs-number">0</span>].iov_base = buf_ + begin_;<br>  iovc[<span class="hljs-number">0</span>].iov_len = (cap_ - begin_);<br>  count = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 两段</span><br>  <span class="hljs-keyword">if</span> (end_ != <span class="hljs-number">0</span>) &#123;<br>    iovc[<span class="hljs-number">1</span>].iov_base = buf_;<br>    iovc[<span class="hljs-number">1</span>].iov_len = end_;<br>    count = <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-function">Status <span class="hljs-title">RingBuffer::Extend</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> need_size)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(buf_ == <span class="hljs-literal">nullptr</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;buf_ == nullptr&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UNLIKELY</span>(need_size &lt; <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;need_size &#123;&#125; &lt; 0&quot;</span>, need_size);<br>  &#125;<br><br>  <span class="hljs-type">uint32_t</span> new_cap = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (need_size == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (cap_ &gt;= max_cap_) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-comment">// 自动扩容，翻倍</span><br>    new_cap = <span class="hljs-number">2</span> * cap_;<br>    <span class="hljs-keyword">if</span> (new_cap &gt; max_cap_) &#123;<br>      new_cap = max_cap_;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (need_size &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 指定大小扩容</span><br>    <span class="hljs-type">uint32_t</span> left_size = <span class="hljs-built_in">GetLeftSize</span>();<br>    <span class="hljs-keyword">if</span> (left_size &gt;= need_size) &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    new_cap = cap_ + (need_size - left_size);<br>    <span class="hljs-keyword">if</span> (new_cap &gt; max_cap_) &#123;<br>      <span class="hljs-built_in">RETURN_ERR</span>(logger_,<br>                          ErrorCode_Code_kParamInvalid,<br>                          <span class="hljs-string">&quot;ExtendCap failed new_cap &#123;&#125; &gt; max_cap_ &#123;&#125; left size &#123;&#125; need size &#123;&#125;&quot;</span>,<br>                          new_cap,<br>                          max_cap_,<br>                          left_size,<br>                          need_size);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-built_in">DEBUG_LOG</span>(logger_, <span class="hljs-string">&quot;extend buffer need_size &#123;&#125; left_size &#123;&#125; from &#123;&#125; to &#123;&#125;&quot;</span>, need_size, <span class="hljs-built_in">GetLeftSize</span>(), cap_, new_cap);<br>  <span class="hljs-comment">// extend</span><br>  <span class="hljs-type">char</span>* new_buff = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[new_cap];<br>  <span class="hljs-keyword">if</span> (new_buff == <span class="hljs-literal">nullptr</span>) &#123;<br>    <span class="hljs-built_in">RETURN_ERR</span>(logger_, ErrorCode_Code_kParamInvalid, <span class="hljs-string">&quot;new buffer failed, size &#123;&#125;&quot;</span>, new_cap);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (empty_) &#123;<br>    <span class="hljs-keyword">delete</span>[] buf_;<br>    buf_ = new_buff;<br>    cap_ = new_cap;<br>    <span class="hljs-built_in">Clear</span>();<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 一段</span><br>  <span class="hljs-keyword">if</span> (end_ &gt; begin_) &#123;<br>    <span class="hljs-built_in">memcpy</span>(new_buff, buf_ + begin_, (end_ - begin_));<br>    <span class="hljs-keyword">delete</span>[] buf_;<br>    buf_ = new_buff;<br>    cap_ = new_cap;<br>    begin_ = <span class="hljs-number">0</span>;<br>    end_ = (end_ - begin_);<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 两段</span><br>  <span class="hljs-type">uint32_t</span> pos = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memcpy</span>(new_buff, buf_ + begin_, (cap_ - begin_));<br>  pos += (cap_ - begin_);<br>  <span class="hljs-keyword">if</span> (end_ != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">memcpy</span>(new_buff + pos, buf_, end_);<br>    pos += end_;<br>  &#125;<br>  <span class="hljs-keyword">delete</span>[] buf_;<br>  buf_ = new_buff;<br>  cap_ = new_cap;<br>  begin_ = <span class="hljs-number">0</span>;<br>  end_ = pos;<br>  <span class="hljs-keyword">return</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误状态Status</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Status</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Status</span>() = <span class="hljs-keyword">default</span>;<br><br>  <span class="hljs-built_in">Status</span>(<span class="hljs-type">const</span> Status&amp; status) = <span class="hljs-keyword">default</span>;<br><br>  Status&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Status&amp; status) = <span class="hljs-keyword">default</span>;<br><br>  <span class="hljs-built_in">Status</span>(Status&amp;&amp; status) <span class="hljs-keyword">noexcept</span>;<br><br>  <span class="hljs-built_in">Status</span>(<span class="hljs-type">int32_t</span> code, <span class="hljs-type">const</span> std::string&amp; message) : <span class="hljs-built_in">code_</span>(code), <span class="hljs-built_in">message_</span>(message) &#123;&#125;<br><br>  <span class="hljs-built_in">Status</span>(<span class="hljs-type">int32_t</span> code, std::string&amp;&amp; message) : <span class="hljs-built_in">code_</span>(code), <span class="hljs-built_in">message_</span>(std::<span class="hljs-built_in">move</span>(message)) &#123;&#125;<br><br>  <span class="hljs-comment">// 其他库也返回类似的Status对象，如trpc::Status</span><br>  <span class="hljs-comment">// 这里将其他Status对象转换为tcaplus::Status</span><br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherStatus</span>&gt;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Status <span class="hljs-title">Cast</span><span class="hljs-params">(OtherStatus&amp; other)</span></span>;<br><br>  <span class="hljs-comment">// 返回错误码</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">Code</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;code_; &#125;<br><br>  <span class="hljs-comment">// 返回错误消息</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">Message</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;message_; &#125;<br><br>  <span class="hljs-comment">// 返回是否成功</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Ok</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;code_ == <span class="hljs-number">0</span>; &#125;<br><br>  <span class="hljs-comment">// 返回是否成功</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">OK</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;code_ == <span class="hljs-number">0</span>; &#125;<br><br>  <span class="hljs-comment">// 返回是否成功</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">NotOk</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;code_ != <span class="hljs-number">0</span>; &#125;<br><br>  <span class="hljs-comment">// 返回是否成功</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">NotOK</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;code_ != <span class="hljs-number">0</span>; &#125;<br><br>  <span class="hljs-comment">// 设置是否能打印日志</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPrintable</span><span class="hljs-params">(<span class="hljs-type">bool</span> printable)</span> </span>&#123; printable_ = printable; &#125;<br><br>  <span class="hljs-comment">// 返回是否能打印日志</span><br>  [[nodiscard]] <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Printable</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> printable_; &#125;<br><br>  [[nodiscard]] <span class="hljs-function">std::string <span class="hljs-title">ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int32_t</span> code_ = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 状态码</span><br>  <span class="hljs-type">bool</span> printable_ = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 是否打印日志</span><br>  std::string message_;     <span class="hljs-comment">// 附加信息</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherStatus</span>&gt;<br><span class="hljs-function">Status <span class="hljs-title">Status::Cast</span><span class="hljs-params">(OtherStatus&amp; other)</span> </span>&#123;<br>  Status st;<br>  <span class="hljs-keyword">if</span> (other.<span class="hljs-built_in">OK</span>()) &#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">move</span>(st);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (other.<span class="hljs-built_in">GetFrameworkRetCode</span>() != <span class="hljs-number">0</span>) &#123;<br>    st.code_ = other.<span class="hljs-built_in">GetFrameworkRetCode</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    st.code_ = other.<span class="hljs-built_in">GetFuncRetCode</span>();<br>  &#125;<br><br>  <span class="hljs-built_in">const_cast</span>&lt;std::string&amp;&gt;(other.<span class="hljs-built_in">ErrorMessage</span>()).<span class="hljs-built_in">swap</span>(st.message_);<br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">move</span>(st);<br>&#125;<br><br>Status::<span class="hljs-built_in">Status</span>(Status&amp;&amp; status) <span class="hljs-keyword">noexcept</span> &#123;<br>  code_ = status.code_;<br>  printable_ = status.printable_;<br>  message_ = std::<span class="hljs-built_in">move</span>(status.message_);<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">Status::ToString</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  std::stringstream string_stream;<br>  string_stream &lt;&lt; <span class="hljs-string">&quot;[code_=&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;code_ &lt;&lt; <span class="hljs-string">&quot;, &quot;</span><br>                &lt;&lt; <span class="hljs-string">&quot;err_msg_=&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;message_ &lt;&lt; <span class="hljs-string">&quot;]&quot;</span>;<br>  <span class="hljs-keyword">return</span> string_stream.<span class="hljs-built_in">str</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>C++</tag>
      
      <tag>缓存</tag>
      
      <tag>RingBuffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github 2023年开源状况和人工智能的崛起</title>
    <link href="/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/"/>
    <url>/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><a href="https://github.blog/2023-11-08-the-state-of-open-source-and-ai/?utm_source=banner&utm_medium=github&utm_campaign=octoverse">Octoverse: The state of open source and rise of AI in 2023</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;2023 年，GitHub 数据凸显了另一种技术如何迅速开始重塑开发者体验：人工智能。越来越多的开发人员开始使用人工智能，同时也尝试构建人工智能驱动的应用程序</p><p>三大趋势：</p><ul><li>开发人员正在大量使用生成式人工智能进行构建，越来越多的开发人员尝试使用 OpenAI 和其他 AI的基础模型。根据开源生成式 AI 项目在 2023 年进入按贡献者数量计算的前 10 个最受欢迎的开源项目，几乎所有开发人员 (92%) 都在使用或试验借助 AI 编码工具。</li><li>开发人员正在大规模运营云原生应用程序。使用基于 Git 的基础设施即代码 (IaC) 工作流程的声明性语言有所增加，云部署的标准化程度更高，开发人员使用 Dockerfile 和容器、IaC 和其他云原生的速度急剧增加。</li><li>2023 年首次开源贡献者数量最多。商业支持的开源项目在首次贡献者和总体贡献中占据最大份额，但今年，生成式 AI 项目首次进入了贡献者最受欢迎的项目前 10。GitHub 上的私人项目显着增长，同比增长 38%，占 GitHub 上所有活动的 80% 以上。</li></ul><h1 id="开发者数量排名"><a href="#开发者数量排名" class="headerlink" title="开发者数量排名"></a>开发者数量排名</h1><p>&emsp;&emsp;美国拥有 2020 万开发者，过去一年开发者增长 21%，继续拥有全球最大的开发者社区。亚太地区、非洲、南美洲和欧洲的开发者社区逐年扩大，其中印度、巴西和日本处于领先地位。</p><p><img src="/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/1.png" alt="开发者TOP10"></p><h2 id="GitHub预测未来五年排名前-10-的开发者社区"><a href="#GitHub预测未来五年排名前-10-的开发者社区" class="headerlink" title="GitHub预测未来五年排名前 10 的开发者社区"></a>GitHub预测未来五年排名前 10 的开发者社区</h2><p><img src="/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/2.png" alt="开发者TOP10预测"></p><h3 id="亚太地区同比增长最快的开发社区"><a href="#亚太地区同比增长最快的开发社区" class="headerlink" title="亚太地区同比增长最快的开发社区"></a>亚太地区同比增长最快的开发社区</h3><table><thead><tr><th></th><th>开发人员数量</th><th>同比增长</th></tr></thead><tbody><tr><td>01 新加坡</td><td>&gt;100 万开发者</td><td>39%</td></tr><tr><td>02 印度</td><td>&gt;1320 万开发者</td><td>36%</td></tr><tr><td>03 香港（特别行政区）</td><td>&gt;160 万开发者</td><td>35%</td></tr><tr><td>04 越南</td><td>&gt;150 万开发者</td><td>34%</td></tr><tr><td>05 印度尼西亚</td><td>&gt;290 万开发者</td><td>31%</td></tr><tr><td>06 日本</td><td>&gt;280 万开发者</td><td>31%</td></tr><tr><td>07 菲律宾</td><td>&gt;130 万开发者</td><td>31%</td></tr><tr><td>08 泰国</td><td>&gt;857K 开发者</td><td>25%</td></tr><tr><td>09 韩国</td><td>&gt;190 万开发者</td><td>22%</td></tr><tr><td>10 澳大利亚</td><td>&gt;140 万开发者</td><td>21%</td></tr></tbody></table><ul><li>印度的开发者社区继续实现同比大幅增长。预计到 2027 年印度将取代美国成为 GitHub 上最大的开发者社区</li><li>新加坡今年是亚太地区开发者人数增长最快的国家，并且以开发者占总人口的比例最高而位居全球第一。<br>新加坡国立大学计算机学院将 GitHub 纳入其课程，高增长也可能归因于该国在东南亚的监管重要性。</li></ul><h3 id="非洲地区同比增长最快的开发社区"><a href="#非洲地区同比增长最快的开发社区" class="headerlink" title="非洲地区同比增长最快的开发社区"></a>非洲地区同比增长最快的开发社区</h3><table><thead><tr><th></th><th>开发人员数量</th><th>同比增长</th></tr></thead><tbody><tr><td>01 尼日利亚</td><td>&gt;86.8 万名开发者</td><td>45%</td></tr><tr><td>02 加纳</td><td>&gt;152K 开发人员</td><td>41%</td></tr><tr><td>03 肯尼亚</td><td>&gt;29.6 万名开发人员</td><td>41%</td></tr><tr><td>04 摩洛哥</td><td>&gt;446K 开发人员</td><td>35%</td></tr><tr><td>05 埃塞俄比亚</td><td>&gt;94K 开发人员</td><td>32%</td></tr><tr><td>06 南非</td><td>&gt;539K 开发者</td><td>30%</td></tr></tbody></table><ul><li>肯尼亚，小学和中学必须教授编程</li></ul><h3 id="南美洲地区同比增长最快的开发社区"><a href="#南美洲地区同比增长最快的开发社区" class="headerlink" title="南美洲地区同比增长最快的开发社区"></a>南美洲地区同比增长最快的开发社区</h3><table><thead><tr><th></th><th>开发人员数量</th><th>同比增长</th></tr></thead><tbody><tr><td>01 阿根廷</td><td>&gt;925K 开发人员</td><td>33%</td></tr><tr><td>02 玻利维亚</td><td>&gt;105K 开发人员</td><td>33%</td></tr><tr><td>03 哥伦比亚</td><td>&gt;872K 开发者</td><td>31%</td></tr><tr><td>04 巴西</td><td>&gt;430 万开发人员</td><td>30%</td></tr><tr><td>05 智利</td><td>&gt;437K 开发人员</td><td>26%</td></tr></tbody></table><ul><li>2023年，巴西的开发者人数是该地区最多的，并继续以两位数增长，同比增长30%</li></ul><h3 id="欧洲地区同比增长最快的开发社区"><a href="#欧洲地区同比增长最快的开发社区" class="headerlink" title="欧洲地区同比增长最快的开发社区"></a>欧洲地区同比增长最快的开发社区</h3><table><thead><tr><th></th><th>开发人员数量</th><th>同比增长</th></tr></thead><tbody><tr><td>01 西班牙</td><td>&gt;150 万开发者</td><td>25%</td></tr><tr><td>02 葡萄牙</td><td>&gt;41 万开发人员</td><td>24%</td></tr><tr><td>03 波兰</td><td>&gt;120 万开发者</td><td>24%</td></tr><tr><td>04 德国</td><td>&gt;290 万开发者</td><td>22%</td></tr><tr><td>05 意大利</td><td>&gt;110 万开发者</td><td>22%</td></tr><tr><td>06 法国</td><td>&gt;230 万开发者</td><td>22%</td></tr><tr><td>07 英国</td><td>&gt;340 万开发人员</td><td>21%</td></tr></tbody></table><h1 id="2023-年生成式-AI-爆发式增长"><a href="#2023-年生成式-AI-爆发式增长" class="headerlink" title="2023 年生成式 AI 爆发式增长"></a>2023 年生成式 AI 爆发式增长</h1><p>虽然生成式人工智能在 2023 年引起了轰动，但对于 GitHub 上的开发者来说，它并不是全新的。事实上，过去几年我们已经在 GitHub 上看到了几个生成式 AI 项目的出现，以及许多其他专注于 AI 的项目。但 2023 年的 GitHub 数据反映了这些人工智能项目如何从更面向专业的工作和研究发展到更主流的采用，开发人员越来越多地使用预先训练的模型和 API 来构建由人工智能驱动的生成应用程序。<br>就在去年过半的时候，2023 年的生成式 AI 项目数量是 2022 年全年的两倍多，这只是冰山一角。</p><ul><li><p>开发人员越来越多地尝试人工智能模型。在过去的几年里，开发人员使用tensorflow&#x2F;tensorflow、pytorch&#x2F;pytorch等机器学习库构建项目，而现在更多的开发人员尝试使用AI模型和LLM（例如ChatGPT API）。</p></li><li><p>保持聪明：预计企业和组织也将利用预先训练的人工智能模型，特别是随着越来越多的开发人员熟悉如何使用它们进行构建。</p></li><li><p>开源人工智能创新多种多样，顶级人工智能项目由个人开发者拥有。分析 GitHub 上排名前 20 的开源生成式 AI 项目，其中一些顶级项目归个人所有。这表明 GitHub 上的开源项目继续推动创新，并向我们所有人展示行业的未来发展，社区围绕最令人兴奋的进步而构建。</p></li><li><p>生成式人工智能正在推动生成式人工智能项目的个人贡献者在全球范围内大幅增长，同比增长 148%，生成式人工智能项目总数也同比增长 248%。值得注意的是，美国、印度和日本在开发者社区中处于领先地位，其他地区（包括香港特别行政区）、英国和巴西紧随其后。</p></li></ul><p><img src="/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/3.png" alt="生成式人工智能项目"></p><p>生成式人工智能会对开发者产生什么影响？</p><p>今年早些时候，我们与哈佛商学院和 Keystone.AI 合作，围绕人工智能对开发者环境产生的经济和生产力影响进行了一些研究。我们发现的一项更引人注目的关键发现是，到 2030 年，开发人员将从生成式 AI 中受益的生产力提升预计可为全球经济贡献 1.5 万亿美元，并为全球新增 1500 万“有效开发人员” 。</p><p>在过去的一年里，基于基础模型（例如 ChatGPT）构建的应用程序呈指数级增长，因为开发人员使用这些 LLM 来开发面向用户的工具，例如 API、机器人、助手、移动应用程序和插件。全球开发人员正在帮助为主流采用奠定基础，而实验正在帮助组织建立人才库。</p><h1 id="最流行的编程语言"><a href="#最流行的编程语言" class="headerlink" title="最流行的编程语言"></a>最流行的编程语言</h1><p><img src="/2024/04/08/ai-git2023%E6%8A%A5%E5%91%8A/4.png" alt="最流行的编程语言"></p><p>JavaScript 再次夺得第一大最受欢迎语言的桂冠，并且我们继续看到 Python 和 Java 等熟悉的语言逐年保持在前五名语言之列。</p><p>TypeScript 越来越受欢迎。今年，TypeScript 首次取代 Java，成为 GitHub 上 OSS 项目中第三大最受欢迎的语言，其用户群增长了 37%。 TypeScript 是一种集语言、类型检查器、编译器和语言服务于一体的语言，它于 2012 年推出，标志着渐进类型的到来，它允许开发人员在代码中采用不同级别的静态和动态类型。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>GitHub 是生成式 AI 的开发者平台。生成式 AI 将于 2023 年从专业领域发展成为主流技术，开源活动的爆炸式增长反映了这一点。随着越来越多的开发人员构建和试验生成式 AI，他们正在使用 GitHub 进行协作和集体学习。</li><li>开发人员正在 GitHub 上大规模运行云原生应用程序。 2019 年，我们开始看到开源中使用基于容器的技术的开发人员数量大幅增加，并且越来越多的开发人员使用基于 Git 的 IaC 工作流程、容器编排和其他云原生技术的速度急剧增加2023 年。如此大量的活动表明开发人员正在使用 GitHub 来标准化他们将软件部署到云的方式。</li><li>GitHub 是开源社区、开发人员和公司构建软件的地方。 2023 年，私有存储库的数量增加了 38%，占 GitHub 上所有活动的 81% 以上。但开源社区持续增长，他们使用 GitHub 来构建未来并推动行业向前发展。数据显示新的开源开发人员的增加以及开放社区可能实现的快速创新步伐，很明显开源从未如此强大。</li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>人工智能</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据加密汇总</title>
    <link href="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/"/>
    <url>/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>先从简单的随机算法说起，真正的随机数应该是不可预测的。</p><h2 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h2><p>&emsp;&emsp;rand()，我们用的最多伪随机算法。在做负载均衡时，我们经常会random到某台机器上进行服务，这无伤大雅，但是当要对敏感信息加密时，我们random出一个秘钥因子时，这就会有很大风险被破解。因为rand是通过编程算法得出的，是可预测的，如果将random出的数字转换为黑白像素，可以看出他是有规律的。</p><p><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/1.png" alt="伪随机"></p><p>我们用下面的一段小程序可以发现，伪随机确实是有规律的。这段程序不管执行多少次，每次执行得到的10个随机数是一模一样。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        <span class="hljs-built_in">srand</span>(i);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">rand</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/2.png" alt="无随机种子"><br>rand的随机序列完全依赖于随机种子，就是说如果我知道了你的随机种子，使用rand函数就可以得到和你一模一样的随机序列。因此，如果A同学使用当前时间srand作为随机种子，生成随机数，加密了一段数据，B同学截获了这段数据，B同学只需要根据当前时间取前后n分钟的时间作为随机种子，经过（n*60）次碰撞就解密了A的数据，解出来不要太快。</p><h2 id="真随机数"><a href="#真随机数" class="headerlink" title="真随机数"></a>真随机数</h2><p>&emsp;&emsp;真随机数，就是无法预测的随机数，它是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。(熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等)，真随机数可用于密码学。<br>&emsp;&emsp;&#x2F;dev&#x2F;random和&#x2F;dev&#x2F;urandom是Linux系统中提供的随机设备，两者有啥区别：<br>&#x2F;dev&#x2F;random依赖于系统中断，系统的中断数不足时，尝试读取的进程就会进入等待状态<br>&#x2F;dev&#x2F;urandom不依赖系统的中断，也就不会造成进程忙等待，数据的随机性不如&#x2F;dev&#x2F;random高，但是它不会阻塞，用它就足够</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> seed;<br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">read</span>(fd, &amp;seed, <span class="hljs-built_in">sizeof</span>(seed)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">srand</span>(seed);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">rand</span>());<br>    &#125;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再使用上面的代码进行测试，每次运行都会获得不一样的随机序列，随机序列无法预测<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/3.png" alt="真随机种子"><br>不同语言下的真随机数：<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/4.png"></p><h1 id="消息摘要（单向加密）"><a href="#消息摘要（单向加密）" class="headerlink" title="消息摘要（单向加密）"></a>消息摘要（单向加密）</h1><p>消息摘要又有数字摘要、单向散列、哈希函数等名称，典型的有md5，sha系列算法。他有以下算法特征：</p><ul><li>输入一样，输出必然相同；</li><li>雪崩效应，输入的微小改变，将会引起结果的巨大变化；</li><li>定长输出，无论原始数据多大，结果大小都是相同的；</li><li>不可逆，无法根据特征码还原原来的数据；</li></ul><p>&emsp;&emsp;因此，它可用作单向加密，又称为不可逆加密算法。这种算法一般用作数据库中用户密码的加密，因为他的加密是不可逆的，你很难根据密码的哈希值推算出密码。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/5.png"></p><p>&emsp;&emsp;用户一般设置密码一般都很懒，所有的应用可能使用的是同一个用户名和密码，如果数据库中存放的是单向加密后的数据，那么泄露的影响将会大大降低。最为典型的案例，就是csdn和12306的用户密码的泄露，如果他的密码经过单向加密，无论是网站的数据库管理员还是获取了密码数据的黑客，能看到的只是一长串毫无意义的字符，很难将它还原成真正的密码。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/6.png"></p><h2 id="单向加密破解"><a href="#单向加密破解" class="headerlink" title="单向加密破解"></a>单向加密破解</h2><p>  虽然单向加密是不可逆的，但是花费一定的代价仍然有破解的方法。</p><ol><li>暴力破解<br>  用穷举法组合出所有的密码可能，然后经哈希机密算法计算，将结果与哈希串进行比对它需要大量的计算，因此破解速度非常慢，以14位字母和数字的组合密码为例，共有1.24×10^25种可能，即使电脑每秒钟能进行10亿次运算，也需要4亿年才能破解；</li><li>数据字典<br>  提前生成可能密码与对应哈希串的对照表，密码攻击时直接根据哈希串从对照表中查询对应的密码。需要海量的磁盘空间来储存数据，以14位字母和数字的组合密码为例，生成的密码32位哈希串的对照表将占用5.7×10^14 TB的存储空间。</li></ol><h2 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a>彩虹表</h2><p>&emsp;&emsp;上面的两种破解方法都很蠢，第一种要花费大量的时间，第二种要花费大量的空间，而彩虹表则是两者的折中。它将耗时和占用空间控制在可接受的范围内。可以在一定的空间内存储更多的哈希值，从而使攻击更加有效。<br>&emsp;&emsp;下图中“7位密码、全部字符集、哈希链长度为2万”的彩虹表大小为32G，本地生成大约需要332天，而从网上下载只需要2个小时左右，破解要48分钟，主流的彩虹表的大小普遍在100G以上。就是说根据你的单向加密的密文，我只需要从网上下载彩虹表，查表48分钟就可以破解了。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/7.png"></p><p>&emsp;&emsp;彩虹表是如何实现的呢？(<a href="https://baijiahao.baidu.com/s?id=1611935212672798027&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1611935212672798027&amp;wfr=spider&amp;for=pc</a>!)<br>&emsp;&emsp;彩虹表的原理和数据字典的原理有些相像，数据字典中存放的是“明文，密文”这样的数据对，而彩虹表就是将这些数据对用H和R两个函数串起来，我只需要将哈希链的首尾元素p0和pn做为一个数对存入表中，中间的其它元素全部都可以通过计算获取这样就大大的减少存储空间。</p><p><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/8.png"></p><p>&emsp;&emsp;这个哈希链中p是明文，q是哈希串，H是加密使用的hash函数（md5，sha），R是规约函数。比较难理解的就是R函数了，它其实并没有特殊的含义，他的意义只是将上一个数对的末尾字符串（密文）和下一个数对的首字符串（明文）串起来，尽可能多的覆盖数据字典中的数对。<br>&emsp;&emsp;知道了彩虹表中存放的是(P0，Pn)这样的数对，怎么破解？比如一个密文A，要得到他的明文，则先和表中的Pn进行匹配，匹配成功了，则明文是就是P(n-1)，我们将P0经过H，R进行多次计算就可以得到P(n-1)。如果没有匹配成功，计算B&#x3D;R(H(A))，再用B和表中的Pn进行匹配，匹配成功则A的明文就是P(n-2)。如果还没匹配成功，则继续计算C&#x3D;R(H(B))，继续匹配，以此类推。<br>&emsp;&emsp;彩虹表的关键是构造R函数，优秀的R函数要保证计算结果均匀分布，即避免出现相同的明文密码。然而想构造优秀的R函数是件非常困难的事，不同的哈希链中可能会出现大量的重复数据，严重影响了密码攻击的效率。改良后的彩虹表在哈希链的计算过程中引入不同的R函数，有效减少不同哈希链中的重复节点，进一步提高了攻击效率。如果将不同的R函数用不同的颜色表示，众多的哈希链就会像彩虹一样，从里到外呈现出颜色变化，这就是彩虹表名称的由来。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/9.png"></p><h2 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h2><p>&emsp;&emsp;通过彩虹表可以看出，一个7位的字母密码的md5，通过彩虹表7秒钟就破解出你的明文。可见在数据库中存放密码的md5，还不够安全。<br>&emsp;&emsp;防御彩虹表最有效的方法就是“加盐”，即在密码的特定位置插入特定的字符串，这个特定字符串就是“盐”，加盐后的密码经过哈希加密得到的哈希串与加盐前的哈希串完全不同，黑客用彩虹表得到的密码根本就不是真正的密码。即使黑客知道了“盐”的内容、加盐的位置，还需要对H函数和R函数进行修改，彩虹表也需要重新生成，因此加盐能大大增加利用彩虹表攻击的难度。<br>&emsp;&emsp;可以为每个密码随机生成盐值，在进行加密，就算黑客要破解，他也要为每个盐值重新生成彩虹表，代价很高。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">MD5(&#x27;123&#x27; + &#x27;1ck12b13k1jmjxrg1h0129h2lj&#x27;) = &#x27;6c22ef52be70e11b6f3bcf0f672c96ce&#x27;<br>MD5(&#x27;456&#x27; + &#x27;1h029kh2lj11jmjxrg13k1c12b&#x27;) = &#x27;7128f587d88d6686974d6ef57c193628&#x27;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/10.png"></p><h2 id="PBKDF2算法（Password-Based-Key-Derivation-Function-2）"><a href="#PBKDF2算法（Password-Based-Key-Derivation-Function-2）" class="headerlink" title="PBKDF2算法（Password-Based Key Derivation Function 2）"></a>PBKDF2算法（Password-Based Key Derivation Function 2）</h2><p>&emsp;&emsp;这个算法是专门用来做密码散列和秘钥导出的。高端的显卡（GPU）和定制的硬件可以每秒进行数十亿次哈希计算，因此字典攻击或暴力攻击依然可以很高效。为了降低攻击者的效率，我们可以使加密变慢。美国政府机构已经将这个方法标准化，并且用于一些政府和军方的系统，这个方案最大的优点是标准化，实现容易同时采用了久经考验的SHA算法。<br>&emsp;&emsp;该算法原理大致相当于在Hash算法基础上增加盐值，并进行多次Hash运算，随机盐和多次Hash使得建表和破解的难度都大幅增加，多次加密的目的就是让加密变慢。比如，一次hash时间是10us，使用PBKDF2算法迭代1万次，那么单次加密的时间将扩大1w倍，建彩虹表的时间扩为原来的1w倍，代价很高。<br>&emsp;&emsp;这个是详细的算法流程（<a href="https://segmentfault.com/a/1190000004261009%EF%BC%89">https://segmentfault.com/a/1190000004261009）</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/crypto/pbkdf2&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>pwd := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;tencent&quot;</span>)<br>salt := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;1h029kh2lj11jmjxrg13k1c12b&quot;</span>)<br><br>dk := pbkdf2.Key(pwd, salt, <span class="hljs-number">15000</span>, <span class="hljs-number">32</span>, sha256.New)<br>str := base64.StdEncoding.EncodeToString(dk)<br>fmt.Println(str)<br>&#125;<br></code></pre></td></tr></table></figure><p>这是个golang版本的PBKDF2例子，单向加密的耗时和迭代次数相关，这个例子迭代了15000次。<br>&emsp;&emsp;通过以上单向加密，了解到数据库中千万不要保存密码明文。现在很多系统中，已经没有“找回密码”这个功能了，因为服务端真的不知道你的密码，你只能选择“忘记密码”，然后重置。</p><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>&emsp;&emsp;单向加密最为明显的一个特征就是不可逆，如果数据有解密还原的需求，那就可以使用对称加密。采用秘钥加密密码的方法，同一个密钥可以同时用来加密和解密，这种加密方法称为对称加密，也是双向加密，双向加密又称为可逆加密，即生成密文后，在需要的时候可以反解为明文。</p><h2 id="DES加密"><a href="#DES加密" class="headerlink" title="DES加密"></a>DES加密</h2><p>&emsp;&emsp;1977年1月，美国政府颁布：采纳IBM公司设计的方案作为非机密数据的正式数据加密标准（DESData Encryption Standard) 。在通信网络的两端，双方约定一致的Key，在通信的源点用Key对核心数据进行DES加密，然后以密码形式在公共通信网中传输到通信网络的终点，数据到达目的地后，用同样的Key对密码数据进行解密，便再现了明码形式的核心数据。这样，便保证了核心数据在公共通信网中传输的安全性和可靠性。<br>&emsp;&emsp;自DES 算法公诸于世以来，学术界围绕它的安全性等方面进行了研究并展开了激烈的争论。在技术上，对DES的批评主要集中在以下几个方面：</p><p>1、作为分组密码，DES 的加密单位仅有64 位二进制，这对于数据传输来说太小，因为每个分组仅含8 个字符，而且其中某些位还要用于奇偶校验或其他通讯开销。</p><p>2、DES 的密钥的位数太短，只有56 比特，而且各次迭代中使用的密钥是递推产生的，这种相关必然降低密码体制的安全性，在现有技术下用穷举法寻找密钥已趋于可行。</p><p>3、DES 不能对抗差分和线性密码分析。</p><p>4、DES 用户实际使用的密钥长度为56bit，理论上最大加密强度为256。DES 算法要提高加密强度（例如增加密钥长度），则系统开销呈指数增长。除采用提高硬件功能和增加并行处理功能外，从算法本身和软件技术方面都无法提高DES 算法的加密强度。</p><p>&emsp;&emsp;说白了，DES在使用特殊的硬件是可以被暴力破解的。最典型的是有个专门破解des的机器，EFF DES破解机(<a href="https://baike.baidu.com/item/EFF-DES%E7%A0%B4%E8%A7%A3%E6%9C%BA/22718143?fr=aladdin)%E3%80%82">https://baike.baidu.com/item/EFF-DES%E7%A0%B4%E8%A7%A3%E6%9C%BA/22718143?fr=aladdin)。</a></p><h2 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h2><p>&emsp;&emsp;2000年10月，NIST（美国国家标准和技术协会）宣布通过从15种候选算法中选出的一项新的密匙加密标准。AES(Advanced Encryption Standard)，高级加密标准，速度快，安全级别高。<br>&emsp;&emsp;加密模式：AES一共有四种加密模式，分别是ECB（电子密码本模式）、CBC（密码分组链接模式）、CFB、OFB，我们一般使用的是CBC模式。四种模式中除了ECB相对不安全之外，其它三种模式的区别并没有那么大。AES加密算法采用分组密码体制，根据秘钥长度分为AES-128（16byte），AES-192（24byte）和AES-256（32byte），AES-128是16byte密钥10轮加密，AES-256是32byte密钥14轮加密，AES256安全程度更高。</p><h3 id="ECB加密"><a href="#ECB加密" class="headerlink" title="ECB加密"></a>ECB加密</h3><p>&emsp;&emsp;ECB加密是AES加密中的一种模式，它为啥不安全呢？ECB模式全称是电子密码本（Electronic CodeBook）模式。<br>&emsp;&emsp;ECB加密过程是先将明文按秘钥长度（128，192，256）进行分组，不足一组的需要填充，每组使用AES算法用秘钥进行加密。</p><p><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/11.png"><br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/12.png"></p><p>下面是go语言版本的ECB加密和解密</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;crypto/aes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">//AES ECB模式的加密解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ECBEncrypt</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">//key只能是 16 24 32长度</span><br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">//padding</span><br>src = PKCS5Padding(src, block.BlockSize())<br><span class="hljs-comment">//返回加密结果</span><br>encryptData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(src))<br><span class="hljs-comment">//存储每次加密的数据</span><br>tmpData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, block.BlockSize())<br><br><span class="hljs-comment">//分组分块加密</span><br><span class="hljs-keyword">for</span> index := <span class="hljs-number">0</span>; index &lt; <span class="hljs-built_in">len</span>(src); index += block.BlockSize() &#123;<br>block.Encrypt(tmpData, src[index:index+block.BlockSize()])<br><span class="hljs-built_in">copy</span>(encryptData[index:], tmpData)<br>&#125;<br><span class="hljs-keyword">return</span> encryptData, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ECBDecrypt</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">//key只能是 16 24 32长度</span><br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">//返回解密结果</span><br>decryptData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(src))<br><span class="hljs-comment">//存储每次解密的数据</span><br>tmpData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, block.BlockSize())<br><br><span class="hljs-comment">//分组分块解密</span><br><span class="hljs-keyword">for</span> index := <span class="hljs-number">0</span>; index &lt; <span class="hljs-built_in">len</span>(src); index += block.BlockSize() &#123;<br>block.Decrypt(tmpData, src[index:index+block.BlockSize()])<br><span class="hljs-built_in">copy</span>(decryptData[index:], tmpData)<br>&#125;<br><span class="hljs-keyword">return</span> PKCS5UnPadding(decryptData), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS5Padding</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>padding := blockSize - <span class="hljs-built_in">len</span>(cipherText)%blockSize<br><span class="hljs-comment">//填充</span><br>padText := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(cipherText, padText...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS5UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>length := <span class="hljs-built_in">len</span>(origData)<br>unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br><span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br></code></pre></td></tr></table></figure><p>简单提下这个地方的Padding，即数据填充。AES加密需要明文按一定长度对齐，叫做块大小(BlockSize)，比如16字节，那么对于一段任意的数据，加密前需要对最后一个块填充到16 字节，解密后需要删除掉填充的数据。有三种填充方式PKCS7Padding，PKCS5Padding，ZeroPadding：</p><ul><li>ZeroPadding，数据长度不对齐时使用0填充，否则不填充。</li><li>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小。</li><li>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。</li></ul><p>&emsp;&emsp;其实PKCS7Padding和PKCS5Padding区分并不是很细，他们最后一个字节肯定为填充数据的长度，所以在解密后可以准确删除填充的数据，而使用ZeroPadding填充时，没办法区分真实数据与填充数据，所以只适合以\0结尾的字符串加解密。<br>&emsp;&emsp;使用ECB加密一张图片时，发现它并不能很好隐藏原图的信息。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/13.png"></p><p>主要原因是，ECB的明文分组与密文分组是一一对应的关系，而分组与分组之间的关系没有被很好的隐藏，比如A分组加密为A1，B分组加密为B1，但A与B的某种函数关系在A1和B1中任然被保留了，即如果A&#x3D;&#x3D;B，那么A1必然&#x3D;&#x3D;B1。所以色块与色块间的依赖关系被保留了。</p><p>由于这种关系，ECB模式中，攻击者无需破译密码就能操纵明文。比如这样一个场景：</p><p>从A-5374账号向B-6671账号转账1亿元<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/14.png"><br>将上面数据用ECB加密，加密后<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/15.png"><br>攻击者将密文分组1和2对调，分组对调数据仍然能正常解密<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/16.png"><br>攻击者没有试图破译密码，但场景却发生了变化<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/17.png"></p><h3 id="CBC加密"><a href="#CBC加密" class="headerlink" title="CBC加密"></a>CBC加密</h3><p>&emsp;&emsp;CBC加密也是AES加密的一种加密模式，全称是Cipher Block Chaining(密码分组链接模式)。他在ECB的基础之上引入了初始向量的概念，说白了就是一个加盐的过程，不过每个分组使用的盐值是上一个分组的密文而已。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/18.png"><br>&emsp;&emsp;加密的时候，第一个明文块会首先和初始向量IV做异或操作，然后再经过密钥加密，然后第一个密文块又会作为第二个明文块的加密向量来异或，依次类推下去，这样相同的明文块加密出的密文块就是不同的，因此更加安全，我们常用的就是CBC加密模式。比如，第一个分组的明文是A，CBC加密后为A1，第二个分组的明文也是A，CBC加密后为A2，A1!&#x3D;A2，因为第一个分组和第二个分组使用了不同的初始向量。因此，CBC加密很好的隐藏了色块与色块间的关系。<br>&emsp;&emsp;再回到上面的攻击场景，黑客调整了明文分组的顺序，那么这个明文将无法被解密。<br>下面是一个go版本的cbc加密的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;crypto/aes&quot;</span><br><span class="hljs-string">&quot;crypto/cipher&quot;</span><br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;encoding/hex&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;2019201920192019&quot;</span>) <span class="hljs-comment">//16byte</span><br>iv := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&amp;~!@#$*|87654321&quot;</span>) <span class="hljs-comment">//加密时必须随机生成                </span><br>pwd := <span class="hljs-string">&quot;tencent0123456789&quot;</span> <span class="hljs-comment">//32byte</span><br><br>en, _ := CBCEncrypt(pwd, key, iv)<br>ret := en + <span class="hljs-string">&quot;.&quot;</span> + hex.EncodeToString(iv)<br>fmt.Println(ret)<br><br>        de, _ := CBCDecrypt(en, key, iv)<br>fmt.Println(<span class="hljs-type">string</span>(de))<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CBCEncrypt</span><span class="hljs-params">(encodeStr <span class="hljs-type">string</span>, key []<span class="hljs-type">byte</span>, iv []<span class="hljs-type">byte</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>encodeBytes := []<span class="hljs-type">byte</span>(encodeStr)<br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><br><span class="hljs-comment">//填充</span><br>encodeBytes = PKCS5Padding(encodeBytes, block.BlockSize())<br><br><span class="hljs-comment">//加密</span><br>blockMode := cipher.NewCBCEncrypter(block, iv)<br>crypted := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(encodeBytes))<br>blockMode.CryptBlocks(crypted, encodeBytes)<br><br><span class="hljs-comment">//base64</span><br><span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString(crypted), <span class="hljs-literal">nil</span><br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CBCDecrypt</span><span class="hljs-params">(decodeStr <span class="hljs-type">string</span>, key []<span class="hljs-type">byte</span>, iv []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">//先base64反编码</span><br>decodeBytes, err := base64.StdEncoding.DecodeString(decodeStr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br>block, err := aes.NewCipher(key)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-comment">//解密</span><br>blockMode := cipher.NewCBCDecrypter(block, iv)<br>origData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(decodeBytes))<br>blockMode.CryptBlocks(origData, decodeBytes)<br><br><span class="hljs-keyword">return</span> PKCS5UnPadding(origData), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS5Padding</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>padding := blockSize - <span class="hljs-built_in">len</span>(cipherText)%blockSize<br><span class="hljs-comment">//填充</span><br>padText := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(cipherText, padText...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS5UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>length := <span class="hljs-built_in">len</span>(origData)<br>unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br><span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>初始向量在加密时必须真随机生成，它最后可以通过一个分隔符放在密文的末尾，作为密文的一部分，它是可以被暴露出去的。最终密文进行base64编码，初始向量进行16进制编码，通过“点”连接，可以得到一个这样的密文串（当然也可用其他的序列化方式）。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/19.png"></p><h2 id="分层加密"><a href="#分层加密" class="headerlink" title="分层加密"></a>分层加密</h2><p>&emsp;&emsp;通常我们会把系统要使用的密码（mysql，ftp等）保存在配置文件中，明文保存往往是有风险的，一旦机器被入侵，明文密码就这样被泄露出去。最好是使用秘钥对密码进行加密，但是秘钥也保存在配置里，它还是会被泄露啊。此时秘钥可以再用新的秘钥再加密，这样一层层的加密秘钥，最后的秘钥，我们称之为根秘钥，他可以部分硬编码到程序中。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/20.png"></p><p>&emsp;&emsp;密钥分层管理至少选择两层结构进行管理：根密钥和工作密钥。这个图中，根秘钥加密了存储秘钥，存储秘钥加密了mysql的密码，像这种多层加密，每个模块使用不同的秘钥加密，黑客就算拿到了mysql的密码密文也要先找到他的存储秘钥，找到存储秘钥，还要找到根秘钥。<br>&emsp;&emsp;因此，这个分层加密的关键是根秘钥保存。而这又回到了PBKDF2这个函数。它不仅仅可以用来单向加密，还可以用于根秘钥导出。PBKDF2是一个基于口令的密钥导出函数，从公共秘密值导出一个或多个密钥。这样可以防止获得派生密钥的攻击者学习关于输入秘密值或任何其他导出密钥的有用信息；也可以用来确保派生密钥具有其他期望的属性，诸如在某些特定加密系统中避免“弱密钥”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go">DK = PBKDF2(PRF, Password, Salt, c, dkLen)<br><br>PRF是一个hash函数，例如HASH_HMAC, sha函数<br>Password是用来生成密钥的原文密码。<br>Salt是一个加密用的盐值。<br>c是进行重复计算的次数。<br>dkLen是期望得到的密钥的长度。<br>DK是最后产生的密钥。<br></code></pre></td></tr></table></figure><p>password就是所谓的公共秘密值，这个值可以保存在某个配置文件中，Salt硬编码到代码中。迭代次数设到1w次以上，以加大暴力攻击的难度。那么每次解密的流程就要先从配置中PBKDF2导出根秘钥，再解密存储秘钥，最后解密mysql的密码。</p><p>通过以上的操作，秘钥仍然是有泄露的风险的，我们需要正确的管理他的生命周期：</p><ul><li>生成: 生成算法随机性差，导致密钥可被预测，或攻击者可以自己生成密钥。</li><li>分发: 密钥明文分发，导致密钥存在被攻击者截获的风险。</li><li>更新: 密钥从不更新，导致攻击者更容易获取密钥，从而能够轻易获取敏感数据的明文。</li><li>存储: 密钥明文存储在数据库中，导致攻击者容易读取出密钥，从而能够轻易获取敏感数据的明文。</li><li>备份: 如果重要密钥从不备份，一旦密钥丢失，将导致原有加密的数据不能解密，大大降低了系统可靠性。</li><li>销毁: 密钥仅被普通删除，导致攻击者有可能恢复出密钥。</li></ul><h1 id="非对称加密RSA"><a href="#非对称加密RSA" class="headerlink" title="非对称加密RSA"></a>非对称加密RSA</h1><p>&emsp;&emsp;AES对称加密的数据虽然很难破解，但是他有一个严重的弊端，就是秘钥的传输。换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。<br>&emsp;&emsp;1976年，两位美国计算机学家Whitfield Diffie 和 Martin Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为”Diffie-Hellman密钥交换算法”。这个算法启发了其他科学家。人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。这种新的加密模式被称为”非对称加密算法”：<br>　　（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。<br>　　（2）甲方获取乙方的公钥，然后用它对信息加密。<br>　　（3）乙方得到加密后的信息，用私钥解密。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/21.png"><br>&emsp;&emsp;非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥和私钥。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。<br>&emsp;&emsp;基于这种想法，罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年设计了一种算法，可以实现非对称加密，即RSA。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。<br>&emsp;&emsp;这种算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。<br>&emsp;&emsp;它的基本算法是这样的：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">RSA加密算法为： <br>(<span class="hljs-number">1</span>) 取两个大素数p,q ； <br>(<span class="hljs-number">2</span>) 计算 <span class="hljs-built_in">n</span>=p*q , φ(<span class="hljs-built_in">n</span>)=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)； <br>(<span class="hljs-number">3</span>) 随机选取整数e，满足 <span class="hljs-built_in">gcd</span>(e, φ(<span class="hljs-built_in">n</span>))=<span class="hljs-number">1</span> （e与φ(<span class="hljs-built_in">n</span>)互素）； <br>(<span class="hljs-number">4</span>) 计算 d 满足 d*e≡<span class="hljs-number">1</span> (<span class="hljs-built_in">mod</span> φ(<span class="hljs-built_in">n</span>))； （d为e的逆元，可通过扩展的欧几里得算法进行求解）<br>(<span class="hljs-number">5</span>) ｛e，<span class="hljs-built_in">n</span>｝为公钥，｛d，<span class="hljs-built_in">n</span>｝为私钥<br>(<span class="hljs-number">6</span>) 加密时c = x^e <span class="hljs-built_in">mod</span> <span class="hljs-built_in">n</span> ；解密时 x = c^d <span class="hljs-built_in">mod</span> <span class="hljs-built_in">n</span> <br></code></pre></td></tr></table></figure><p>&emsp;&emsp;RSA这个算法流程看起来简单，但是要详细证明它的正确性，就有点复杂了，详细证明可以参考这篇文章(<a href="https://blog.csdn.net/flurry_rain/article/details/77970691)%E3%80%82">https://blog.csdn.net/flurry_rain/article/details/77970691)。</a><br>&emsp;&emsp;这个算法从1977年提出到现在都没有被破解，并被广泛应用，可以说只要有网络的地方就有RSA，它是多么的牛叉！对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。确实也有人研究如何做大数的因式分解，Pollard_rho 算法（<a href="https://blog.csdn.net/maxichu/article/details/45459533%EF%BC%89">https://blog.csdn.net/maxichu/article/details/45459533）</a></p><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>&emsp;&emsp;https就是典型的对称加密和非对称加密共同使用的场景。<br><img src="/2024/04/03/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%B1%87%E6%80%BB/22.png"></p><ol><li><p>client向server发送请求，连接到server的443端口。</p></li><li><p>服务端必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥。</p></li><li><p>传送证书。这个证书包含了很多信息，如证书的颁发机构，过期时间、服务端的公钥，第三方证书认证机构(CA)的签名，服务端的域名信息等内容。</p></li><li><p>客户端解析证书。这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个对称加密的秘钥。然后用证书对该秘钥进行加密。</p></li><li><p>客户端传送公钥加密后的秘钥。这部分传送的是用证书加密后的秘钥，目的就是让服务端得到这个秘钥，以后客户端和服务端的通信就可以通过这个秘钥来进行对称加密解密了。</p></li><li><p>服务端解密秘钥。服务端用私钥解密秘密秘钥，得到了客户端传过来的秘钥，之后通信使用对称加密。</p></li><li><p>这样客户端和服务端都拥有相同的秘钥，之后的通信也转为使用对称加密。</p></li></ol><p>&emsp;&emsp;随机数，消息摘要，对称加密和非对称加密，广泛应用于我们的计算机系统中，比如https，token，防盗链等。加密无处不在，了解这些加密的一些基本原理，可以提高安全意识，应用于编码中，提高代码的安全性。</p>]]></content>
    
    
    <categories>
      
      <category>加密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Go</tag>
      
      <tag>数据加密</tag>
      
      <tag>AES</tag>
      
      <tag>RSA</tag>
      
      <tag>CBC</tag>
      
      <tag>ECB</tag>
      
      <tag>真随机</tag>
      
      <tag>伪随机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>p99时延统计</title>
    <link href="/2024/04/03/p99%E6%97%B6%E5%BB%B6%E7%BB%9F%E8%AE%A1/"/>
    <url>/2024/04/03/p99%E6%97%B6%E5%BB%B6%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="性能数据"><a href="#性能数据" class="headerlink" title="性能数据"></a>性能数据</h1><p>一般统计后端数据库的性能指标有最大时延，平均时延，但还有个更重要的指标即P99时延，99%的用户落在哪个时延区间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Latency</span>    Number of requests<br><span class="hljs-attribute">1s</span>         <span class="hljs-number">5</span><br><span class="hljs-attribute">2s</span>         <span class="hljs-number">5</span><br><span class="hljs-attribute">3s</span>         <span class="hljs-number">10</span><br><span class="hljs-attribute">4s</span>         <span class="hljs-number">40</span><br><span class="hljs-attribute">5s</span>         <span class="hljs-number">20</span><br><span class="hljs-attribute">6s</span>         <span class="hljs-number">15</span><br><span class="hljs-attribute">7s</span>         <span class="hljs-number">4</span><br><span class="hljs-attribute">8s</span>         <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>比如100个请求，第99个请求落在了7s这个区间,那么p99就是7秒,而不是前99个请求的平均时延</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>对时间划分区间，统计落在每个区间的请求数，和总时延</li><li>每秒根据请求总数计算第99%的请求落在哪个时延区间</li><li>计算时延区间的平均时延</li></ul><p>比如，数据库的大部分时延在毫秒级，如此划分时延区间</p><ul><li>时延 [0-20ms)的1ms一个桶，总共20个桶</li><li>时延 [20ms-200ms)的时候10ms一个桶，总共18个桶</li><li>时延 [200ms-1000ms)50ms一个桶，总共16个桶</li><li>时延 [1000ms+) 总共一个桶</li></ul><p>某个请求的时延落在哪个桶类，则该桶中的请求总数++，时延总数++ （下章节的SetP99Delay函数）;每秒根据请求总数的99%,落在哪个时延区间,计算时延区间的平均时延（下章节的GetP99Delay函数）</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>某监控统计实现，计算p99和获取p99关注函数</p><ul><li>SetP99Delay</li><li>GetP99Delay</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// .h头文件</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_20MS_SIZE 20    <span class="hljs-comment">// [0-20ms)的1ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_200MS_SIZE 18   <span class="hljs-comment">// [20ms-200ms)的时候10ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_1000MS_SIZE 16  <span class="hljs-comment">// [200ms-1000ms)50ms一个桶</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUCKET_OTHER_SIZE 1    <span class="hljs-comment">// [1000ms+) 一个桶</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bucket</span> &#123;<br>  <span class="hljs-type">int64_t</span> totalDelay;<br>  <span class="hljs-type">int64_t</span> count;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monitor</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Monitor</span>();<br>  ~<span class="hljs-built_in">Monitor</span>();<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Init</span><span class="hljs-params">(std::string cmd)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncSendErrCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_sendCount++;<br>    m_sendErrCount++;<br><br>    m_sendSumCount++;<br>    m_sendErrSumCount++;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncSendSuccCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_sendCount++;<br><br>    m_sendSumCount++;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncRecvErrCount</span><span class="hljs-params">()</span> </span>&#123;<br>    m_recvErrCount++;<br>    m_recvCount++;<br><br>    m_recvSumCount++;<br>    m_recvErrSumCount++;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncRecvSuccCount</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span> </span>&#123;<br>    m_recvCount++;<br>    m_recvSumCount++;<br>    <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    m_totalDelay += delay;<br>    m_delayCount++;<br>    m_totalSumDelay += delay;<br>    m_delaySumCount++;<br>    <span class="hljs-keyword">if</span> (m_maxDelay &lt; delay) &#123;<br>      m_maxDelay = delay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m_maxSumDelay &lt; delay) &#123;<br>      m_maxSumDelay = delay;<br>    &#125;<br>    <span class="hljs-built_in">SetP99Delay</span>(delay);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> curTimeMs)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reset</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> &amp;p99Delay, <span class="hljs-type">int64_t</span> &amp;p999Delay, <span class="hljs-type">int64_t</span> &amp;p9999Delay)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// period</span><br>  std::string m_cmd;<br>  <span class="hljs-type">int64_t</span> m_sendCount;<br>  <span class="hljs-type">int64_t</span> m_sendErrCount;<br>  <span class="hljs-type">int64_t</span> m_recvCount;<br>  <span class="hljs-type">int64_t</span> m_recvErrCount;<br>  <span class="hljs-type">int64_t</span> m_delayCount;<br>  <span class="hljs-type">int64_t</span> m_totalDelay;  <span class="hljs-comment">// us</span><br>  <span class="hljs-type">int64_t</span> m_maxDelay;    <span class="hljs-comment">// us</span><br><br>  <span class="hljs-comment">// sum</span><br>  <span class="hljs-type">int64_t</span> m_sendSumCount;<br>  <span class="hljs-type">int64_t</span> m_sendErrSumCount;<br>  <span class="hljs-type">int64_t</span> m_recvSumCount;<br>  <span class="hljs-type">int64_t</span> m_recvErrSumCount;<br>  <span class="hljs-type">int64_t</span> m_delaySumCount;<br>  <span class="hljs-type">int64_t</span> m_totalSumDelay;  <span class="hljs-comment">// us</span><br>  <span class="hljs-type">int64_t</span> m_maxSumDelay;    <span class="hljs-comment">// us</span><br><br>  <span class="hljs-comment">// P99计算，越小越精确</span><br>  <span class="hljs-comment">// [0-20ms)的1ms一个桶，[20ms-200ms)的时候10ms一个桶</span><br>  <span class="hljs-comment">// [200ms-1000ms)50ms一个桶，[1000ms+)单独一个桶</span><br>  Bucket m_20MSBucket[BUCKET_20MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_20MSTotalRecvCount;<br>  Bucket m_200MSBucket[BUCKET_200MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_200MSTotalRecvCount;<br>  Bucket m_1000MSBucket[BUCKET_1000MS_SIZE];<br>  <span class="hljs-type">int64_t</span> m_1000MSTotalRecvCount;<br>  Bucket m_otherBucket;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// .cpp文件</span><br>Monitor::<span class="hljs-built_in">Monitor</span>() &#123;<br>  m_sendSumCount = <span class="hljs-number">0</span>;<br>  m_sendErrSumCount = <span class="hljs-number">0</span>;<br>  m_recvSumCount = <span class="hljs-number">0</span>;<br>  m_recvErrSumCount = <span class="hljs-number">0</span>;<br>  m_delaySumCount = <span class="hljs-number">0</span>;<br>  m_totalSumDelay = <span class="hljs-number">0</span>;<br>  m_maxSumDelay = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">Reset</span>();<br>&#125;<br><br>Monitor::~<span class="hljs-built_in">Monitor</span>() &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Monitor::Init</span><span class="hljs-params">(std::string cmd)</span> </span>&#123;<br>  m_cmd = cmd;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::Reset</span><span class="hljs-params">()</span> </span>&#123;<br>  m_sendCount = <span class="hljs-number">0</span>;<br>  m_sendErrCount = <span class="hljs-number">0</span>;<br>  m_recvCount = <span class="hljs-number">0</span>;<br>  m_recvErrCount = <span class="hljs-number">0</span>;<br>  m_delayCount = <span class="hljs-number">0</span>;<br>  m_totalDelay = <span class="hljs-number">0</span>;<br>  m_maxDelay = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">memset</span>(m_20MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_20MSBucket));<br>  m_20MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(m_200MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_200MSBucket));<br>  m_200MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(m_1000MSBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_1000MSBucket));<br>  m_1000MSTotalRecvCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;m_otherBucket, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(m_otherBucket));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::SetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> delay)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">20000LL</span>) &#123;<br>    <span class="hljs-comment">// [0-20ms)的1ms一个桶</span><br>    m_20MSBucket[delay / <span class="hljs-number">1000LL</span>].count++;<br>    m_20MSBucket[delay / <span class="hljs-number">1000LL</span>].totalDelay += delay;<br>    m_20MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">200000LL</span>) &#123;<br>    <span class="hljs-comment">// [20ms-200ms)的时候10ms一个桶</span><br>    m_200MSBucket[(delay - <span class="hljs-number">20000LL</span>) / <span class="hljs-number">10000LL</span>].count++;<br>    m_200MSBucket[(delay - <span class="hljs-number">20000LL</span>) / <span class="hljs-number">10000LL</span>].totalDelay += delay;<br>    m_200MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">1000000LL</span>) &#123;<br>    <span class="hljs-comment">// [200ms-1000ms)50ms一个桶</span><br>    m_1000MSBucket[(delay - <span class="hljs-number">200000LL</span>) / <span class="hljs-number">50000LL</span>].count++;<br>    m_1000MSBucket[(delay - <span class="hljs-number">200000LL</span>) / <span class="hljs-number">50000LL</span>].totalDelay += delay;<br>    m_1000MSTotalRecvCount++;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    m_otherBucket.count++;<br>    m_otherBucket.totalDelay += delay;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::GetP99Delay</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> &amp;p99Delay, <span class="hljs-type">int64_t</span> &amp;p999Delay, <span class="hljs-type">int64_t</span> &amp;p9999Delay)</span> </span>&#123;<br>  p99Delay = <span class="hljs-number">0</span>;<br>  p999Delay = <span class="hljs-number">0</span>;<br>  p9999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (m_delayCount &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-type">int64_t</span> p99Count = m_delayCount * <span class="hljs-number">99</span> / <span class="hljs-number">100</span>;<br>  <span class="hljs-type">int64_t</span> p999Count = m_delayCount * <span class="hljs-number">999</span> / <span class="hljs-number">1000</span>;<br>  <span class="hljs-type">int64_t</span> p9999Count = m_delayCount * <span class="hljs-number">9999</span> / <span class="hljs-number">10000</span>;<br>  <span class="hljs-built_in">DEBUG_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>            <span class="hljs-string">&quot;p99Count:&#123;&#125; p999Count:&#123;&#125;  p9999Count:&#123;&#125; m_20MSTotalRecvCount:&#123;&#125; m_200MSTotalRecvCount:&#123;&#125; &quot;</span><br>            <span class="hljs-string">&quot;m_1000MSTotalRecvCount:&#123;&#125;, m_otherBucket:&#123;&#125;&quot;</span>,<br>            p99Count,<br>            p999Count,<br>            p9999Count,<br>            m_20MSTotalRecvCount,<br>            m_200MSTotalRecvCount,<br>            m_1000MSTotalRecvCount,<br>            m_otherBucket.count);<br>  <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [0-20ms)的1ms一个桶 m_20MSBucket</span><br>    <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_20MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_20MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_20MSBucket[pos].count;<br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_20MSBucket[pos].totalDelay / m_20MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_200MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [20ms-200ms)的时候10ms一个桶 m_200MSBucket</span><br>    <span class="hljs-type">int</span> total = m_20MSTotalRecvCount;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_200MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_200MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_200MSBucket[pos].count;<br><br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_200MSBucket[pos].totalDelay / m_200MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_1000MSTotalRecvCount &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// find [200ms-1000ms)50ms一个桶 m_1000MSBucket</span><br>    <span class="hljs-type">int</span> total = m_20MSTotalRecvCount + m_200MSTotalRecvCount;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">0</span>; pos &lt; BUCKET_1000MS_SIZE; pos++) &#123;<br>      <span class="hljs-keyword">if</span> (m_1000MSBucket[pos].count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      total += m_1000MSBucket[pos].count;<br><br>      <span class="hljs-comment">// p99</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p99Count &amp;&amp; p99Delay == <span class="hljs-number">0</span>) &#123;<br>        p99Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount + m_1000MSTotalRecvCount &lt; p999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p999Count &amp;&amp; p999Delay == <span class="hljs-number">0</span>) &#123;<br>        p999Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-keyword">if</span> (m_20MSTotalRecvCount + m_200MSTotalRecvCount + m_1000MSTotalRecvCount &lt; p9999Count) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// p9999</span><br>      <span class="hljs-keyword">if</span> (total &gt;= p9999Count &amp;&amp; p9999Delay == <span class="hljs-number">0</span>) &#123;<br>        p9999Delay = m_1000MSBucket[pos].totalDelay / m_1000MSBucket[pos].count;<br>        <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>                 <span class="hljs-string">&quot;total:&#123;&#125; pos:&#123;&#125; totalDelay:&#123;&#125; count:&#123;&#125; p99Delay:&#123;&#125; p999Delay:&#123;&#125; p9999Delay:&#123;&#125;&quot;</span>,<br>                 total,<br>                 pos,<br>                 m_20MSBucket[pos].totalDelay,<br>                 m_20MSBucket[pos].count,<br>                 p99Delay,<br>                 p999Delay,<br>                 p9999Delay);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (m_otherBucket.count &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-type">int64_t</span> otherAvgDelay = m_otherBucket.totalDelay / m_otherBucket.count;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p99Delay) &#123;<br>      p99Delay = otherAvgDelay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p999Delay) &#123;<br>      p999Delay = otherAvgDelay;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == p9999Delay) &#123;<br>      p9999Delay = otherAvgDelay;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">DEBUG_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(), <span class="hljs-string">&quot;p9999Delay:&#123;&#125;&quot;</span>, p9999Delay);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Monitor::Print</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> curTimeMs)</span> </span>&#123;<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-type">int64_t</span> qps = m_sendCount - m_sendErrCount;<br>  <span class="hljs-type">int64_t</span> avgDelay = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (m_delayCount &gt; <span class="hljs-number">0</span>) &#123;<br>    avgDelay = m_totalDelay / m_delayCount;<br>  &#125;<br>  <span class="hljs-type">int64_t</span> p99Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int64_t</span> p999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int64_t</span> p9999Delay = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">GetP99Delay</span>(p99Delay, p999Delay, p9999Delay);<br><br>  <span class="hljs-keyword">if</span> (m_cmd.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-comment">// total</span><br>    <span class="hljs-type">time_t</span> now = curTimeMs / <span class="hljs-number">1000</span>;<br>    tm *ltm = <span class="hljs-built_in">localtime</span>(&amp;now);<br>    <span class="hljs-built_in">printf</span>(<br>        <span class="hljs-string">&quot;&#123;\&quot;time\&quot;:\&quot;%d-%.2d-%.2d %.2d:%.2d:%.2d\&quot;,\&quot;qps\&quot;:%ld, &quot;</span><br>        <span class="hljs-string">&quot;\&quot;request_count\&quot;:%ld,\&quot;success_count\&quot;:%ld,\&quot;failed_count\&quot;:%ld,\&quot;average_delay\&quot;:\&quot;%ld.%ldms\&quot;,&quot;</span><br>        <span class="hljs-string">&quot;\&quot;maximum_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p99_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p999_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p9999_&quot;</span><br>        <span class="hljs-string">&quot;delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;metrics_by_command\&quot;:[&quot;</span>,<br>        <span class="hljs-number">1900</span> + ltm-&gt;tm_year,<br>        <span class="hljs-number">1</span> + ltm-&gt;tm_mon,<br>        ltm-&gt;tm_mday,<br>        ltm-&gt;tm_hour,<br>        ltm-&gt;tm_min,<br>        ltm-&gt;tm_sec,<br>        qps,<br>        qps,<br>        (m_recvCount - m_recvErrCount),<br>        (m_recvErrCount + m_sendErrCount),<br>        avgDelay / <span class="hljs-number">1000</span>,<br>        avgDelay % <span class="hljs-number">1000</span>,<br>        m_maxDelay / <span class="hljs-number">1000</span>,<br>        m_maxDelay % <span class="hljs-number">1000</span>,<br>        p99Delay / <span class="hljs-number">1000</span>,<br>        p99Delay % <span class="hljs-number">1000</span>,<br>        p999Delay / <span class="hljs-number">1000</span>,<br>        p999Delay % <span class="hljs-number">1000</span>,<br>        p9999Delay / <span class="hljs-number">1000</span>,<br>        p9999Delay % <span class="hljs-number">1000</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">INFO_LOG</span>(BenchmarkLogger::<span class="hljs-built_in">GetInstance</span>()-&gt;<span class="hljs-built_in">GetMonitorLogger</span>(),<br>             <span class="hljs-string">&quot;QPS:&#123;&#125; CMD:&#123;&#125; SendSucc:&#123;&#125; SendErr:&#123;&#125; Recv:&#123;&#125; RecvErr:&#123;&#125; AvgDelay:&#123;&#125;us MaxDelay:&#123;&#125;us &quot;</span><br>             <span class="hljs-string">&quot;P99Delay:&#123;&#125;us P999Delay:&#123;&#125;us P9999Delay:&#123;&#125;us&quot;</span>,<br>             qps,<br>             m_cmd.<span class="hljs-built_in">c_str</span>(),<br>             qps,<br>             m_sendErrCount,<br>             (m_recvCount - m_recvErrCount),<br>             m_recvErrCount,<br>             avgDelay,<br>             m_maxDelay,<br>             p99Delay,<br>             p999Delay,<br>             p9999Delay);<br>    <span class="hljs-built_in">printf</span>(<br>        <span class="hljs-string">&quot;&#123;\&quot;command\&quot;:\&quot;%s\&quot;,\&quot;qps\&quot;:%ld, &quot;</span><br>        <span class="hljs-string">&quot;\&quot;request_count\&quot;:%ld,\&quot;success_count\&quot;:%ld,\&quot;failed_count\&quot;:%ld,\&quot;average_delay\&quot;:\&quot;%ld.%ldms\&quot;,&quot;</span><br>        <span class="hljs-string">&quot;\&quot;maximum_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p99_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p999_delay\&quot;:\&quot;%ld.%ldms\&quot;,\&quot;p9999_&quot;</span><br>        <span class="hljs-string">&quot;delay\&quot;:\&quot;%ld.%ldms\&quot;&#125;&quot;</span>,<br>        m_cmd.<span class="hljs-built_in">c_str</span>(),<br>        qps,<br>        qps,<br>        (m_recvCount - m_recvErrCount),<br>        (m_recvErrCount + m_sendErrCount),<br>        avgDelay / <span class="hljs-number">1000</span>,<br>        avgDelay % <span class="hljs-number">1000</span>,<br>        m_maxDelay / <span class="hljs-number">1000</span>,<br>        m_maxDelay % <span class="hljs-number">1000</span>,<br>        p99Delay / <span class="hljs-number">1000</span>,<br>        p99Delay % <span class="hljs-number">1000</span>,<br>        p999Delay / <span class="hljs-number">1000</span>,<br>        p999Delay % <span class="hljs-number">1000</span>,<br>        p9999Delay / <span class="hljs-number">1000</span>,<br>        p9999Delay % <span class="hljs-number">1000</span>);<br>  &#125;<br>  <span class="hljs-built_in">Reset</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>压测</tag>
      
      <tag>P99时延计算</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go性能</title>
    <link href="/2024/03/29/go%E6%80%A7%E8%83%BD/"/>
    <url>/2024/03/29/go%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h1><p>Go 语言自带的 pprof 库就可以分析程序的运行情况，并且提供可视化的功能。可以通过报告生成、Web 可视化界面、交互式终端三种方式来使用 pprof。它包含两个相关的库：</p><ul><li>runtime&#x2F;pprof对于只跑一次的程序，调用 pprof 包提供的函数，手动开启性能数据采集。</li><li>net&#x2F;http&#x2F;pprof对于持续运行的在线服务，访问 pprof 提供的 HTTP 接口，获得性能数据。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    http.ListenAndServe(<span class="hljs-string">&quot;127.0.0.1:6060&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;()<br><br></code></pre></td></tr></table></figure></li></ul><p>下载 cpu profile，默认从当前开始收集 30s 的 cpu 使用情况，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> tool pprof http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/profile?seconds=30</span><br></code></pre></td></tr></table></figure><p>等待30s生成cpu的报告文件，pprof.tdrAgent.samples.cpu，并默认进入终端交互模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> tool pprof -http=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">32000</span> pprof.tdrAgent.samples.cpu<span class="hljs-number">.002</span>.pb.gz<br></code></pre></td></tr></table></figure><p>对生成的报告启动web接口可视化，生成调用堆栈的火焰图，火焰图的每个函数均可点击，查看更深层的堆栈和cpu占用百分比</p>]]></content>
    
    
    <categories>
      
      <category>GO代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>压测</tag>
      
      <tag>性能采集</tag>
      
      <tag>Go</tag>
      
      <tag>pprof</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Perf采集</title>
    <link href="/2024/03/29/Perf%E9%87%87%E9%9B%86/"/>
    <url>/2024/03/29/Perf%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Perf"><a href="#Perf" class="headerlink" title="Perf"></a>Perf</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">perf <span class="hljs-keyword">record</span> -e cpu-clock -g -p <span class="hljs-number">2548</span><br><br>-g 选项是告诉perf <span class="hljs-keyword">record</span>额外记录函数的调用关系<br><br>-e cpu-clock 指perf <span class="hljs-keyword">record</span>监控的指标为cpu周期<br><br>-p 指定需要<span class="hljs-keyword">record</span>的进程pid<br></code></pre></td></tr></table></figure><p>程序运行完之后，perf record会生成一个名为perf.data的文件，如果之前已有，那么之前的perf.data文件会被覆盖</p><p>获得这个perf.data文件之后，就需要perf report工具进行查看</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">perf</span> re<span class="hljs-keyword">port</span> -i perf.data<br></code></pre></td></tr></table></figure><h1 id="使用火焰图展示结果"><a href="#使用火焰图展示结果" class="headerlink" title="使用火焰图展示结果"></a>使用火焰图展示结果</h1><p>Flame Graph项目位于GitHub上：git clone <a href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph</a></p><p>以perf为例，看一下flamegraph的使用方法：</p><ul><li><p>第一步</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">perf <span class="hljs-keyword">record</span> -e cpu-clock -g -p <span class="hljs-number">28591</span><br></code></pre></td></tr></table></figure><p>Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data.</p></li><li><p>第二步</p></li></ul><p>用perf script工具对perf.data进行解析</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">perf</span> script -i perf.<span class="hljs-class"><span class="hljs-keyword">data</span> &amp;&gt; perf.unfold</span><br></code></pre></td></tr></table></figure><ul><li>第三步</li></ul><p>将perf.unfold中的符号进行折叠：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./stackcollapse-perf<span class="hljs-selector-class">.pl</span> perf<span class="hljs-selector-class">.unfold</span> &amp;&gt; perf.folded<br></code></pre></td></tr></table></figure><ul><li>最后生成svg图：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./flamegraph<span class="hljs-selector-class">.pl</span> perf<span class="hljs-selector-class">.folded</span> &gt; perf.svg<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>压测</tag>
      
      <tag>perf</tag>
      
      <tag>性能采集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬盘分区备份</title>
    <link href="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/"/>
    <url>/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="文件拷贝VS扇区拷贝"><a href="#文件拷贝VS扇区拷贝" class="headerlink" title="文件拷贝VS扇区拷贝"></a>文件拷贝VS扇区拷贝</h1><p>当更换硬盘进行数据备份时，最简单的搞法是Ctrl+C Ctrl+V，但还有种更快的备份方式，即物理备份，直接读硬盘扇区，将硬盘中用到的扇区全部备份，本文即介绍如何通过扇区将分区备份成文件<br><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/1.png" alt="扇区备份180MB/s"></p><h1 id="硬盘介绍"><a href="#硬盘介绍" class="headerlink" title="硬盘介绍"></a>硬盘介绍</h1><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/2.png" alt="硬盘结构"></p><p>一个硬盘一般有多个盘片，盘片越多存储容量越大，结构如图，这里记录些知识点：</p><ol><li>盘片正反两面都可读写,磁头数是盘片数两倍</li><li>扇区是按顺序编号的，并且是外磁道向内磁道编号，因为外磁道更快，相同大小的数据，外磁道转半圈，内磁道可能需要转1圈</li><li>每次读取的数据可能在不同磁道，换道时延大概10ms， 顺序读取时延和转速相关，换多个磁道是用电梯算法</li><li>磁道与磁道之间有一定的隔离带，防止数据覆盖，但也有磁盘，为提高容量天然互相覆盖，即瓦记录磁盘，但速度慢</li><li>并口比串口快吗，不会，老的磁盘用的并口并不快</li></ol><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/3.png" alt="并口ATA"><br>ATA高级技术附件（ Advanced Technology Attachment ）硬盘一般使用IDE接口，分为PATA硬盘（即parallelATA,并行ATA硬盘接口规范）和SATA硬盘（即serialATA，串行ATA硬盘接口规范).</p><ol><li>串行ATA的时钟频率要比并行的时钟频率高很多 </li><li>抗干扰能力强</li><li>连线更简单，节省成本，你是愿意插16根网线还是一根</li></ol><h1 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h1><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/4.png" alt="MBR"></p><p>当系统开机或者重启，BIOS 加电自检 ( Power On Self Test – POST )，BIOS执行内存地址为 FFFF:0000H 处的跳转指令，跳转到固化在ROM中的自检程序处，对系统硬件(包括内存)进行检查。接着，读取主引导记录(MBR)。BIOS将相应启动设备的第一个扇区(也就是MBR扇区)读入内存地址为0000:7C00H 处。检查0000:7CFEH-0000:7CFFH(MBR的结束标志位)是否等于55AAH，若不等于则转去尝试其他启动设备，如果没有启动设备满足要求则显示”NO ROM BASIC”然后死机，如果发现磁盘中不存在活动分区，则显示类似如下的信息“Remove disk or other media Press any key to restart”</p><h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><p>MBR中的分区表<br><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/5.png" alt="分区表"></p><ul><li>CHS:<br>CHS寻址模式使用的是磁柱号（CYLINDER）、磁头号（HEAD）、扇区号（SECTOR）这三个值来寻址，也就是使用以上分区表结构中的01H，02H处的值来确定分区的起始位置，使用05H和06H处的值来确定分区的结束位置。CHS寻址模式中，磁头数用 8 个二进制位存储, 最大为 256 ;柱面数用10个二进制位存储, 最大为 1024; 扇区数用6个二进制位存储，最大为63 。每个扇区一般是 512个字节。所以磁盘最大容量为: 256 * 1024 * 63 * 512 &#x2F; 1048576 &#x3D; 8064 MB ( 1M &#x3D; 1048576 Bytes)或硬盘厂商常用的单位:256 * 1024 * 63 * 512 &#x2F; 1000000 &#x3D; 8455 MB ( 1M &#x3D; 1000000 Bytes )。在 CHS 寻址方式中, 磁头, 柱面, 扇区的取值范围分别为 0 到 Heads-1,0 到 Cylinders-1, 1 到 Sectors per track (注意是从 1 开始)。因此，CHS寻址的最大空间为8G左右。</li><li>LBA：<br>对于现代大于8.4G的硬盘，CHS已经无法表示, BIOS使用LBA寻址模式，对于超出的部分，CHS的值通常设为 FEFFFF, 并加以忽略，直接使用08H-0FH的8字节相对值来确定分区的起始位置。因此，现在的分区的寻址模式大部分都是使用LBA来寻址，LBA的一个地址使用4个字节来表示，最大为232*512&#x3D;2TB。对于大于2TB的硬盘，如果要完全利用硬盘将使用GTP分区</li></ul><h1 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h1><p>分区中的文件系统类型表：</p><table><thead><tr><th>十六进制值</th><th>意义</th></tr></thead><tbody><tr><td>00h</td><td>未用</td></tr><tr><td>01h</td><td>FAT12</td></tr><tr><td>04h</td><td>FAT16（CHS寻址模式，分区大小最大为32MB）</td></tr><tr><td>05h</td><td>扩展分区（CHS寻址模式）</td></tr><tr><td>06h</td><td>FAT16（CHS寻址模式，分区大小大于32MB）</td></tr><tr><td>07h</td><td>NTFS</td></tr><tr><td>0BH</td><td>FAT32(CHS寻址模式)</td></tr><tr><td>0CH</td><td>FAT32（LBA寻址模式）</td></tr><tr><td>0EH</td><td>FAT15（LBA寻址模式）</td></tr><tr><td>0FH</td><td>扩展分区（LBA寻址模式）</td></tr></tbody></table><p>MBR有四个分区表，四个分区表中可以用来全部描述主分区，或最多只能有一个用来描述扩展分区，其他三个描述主分区。当描述扩展分区时，则分区表的文件系统标志位为0x0F，此分区表描述了一个链表，链表的每个节点称作虚拟MBR，他与MBR有相同的结构，虚拟MBR的分区表1描述了一个逻辑分区，而分区表2指向了下一个节点，其他分区表为空。当虚拟MBR的分区表2为0，则表示链表结束，因此扩展分区中可以分为很多个逻辑分区。</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/6.jpg" alt="扩展分区"></p><h1 id="DBR"><a href="#DBR" class="headerlink" title="DBR"></a>DBR</h1><p>DBR全称为Driver Boot Record，俗称分区引导扇区。在DBR中包含分区引导程序、分区信息记录，比如文件$MFT起始簇、跳转代码、OEM、结束标志等信息。下图为DBR扇区数据：<br>DBR 扇区总共有五部分数据组成，即</p><ol><li>跳转程序，共占3B；</li><li>OEM代号，共占8B；</li><li>BPB数据，共占73B；</li><li>引导程序，共占426B；</li><li>结束标志，数值为 55 AA，占用2B。</li></ol><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/7.png" alt="DBR"></p><h1 id="NTFS文件系统bitmap"><a href="#NTFS文件系统bitmap" class="headerlink" title="NTFS文件系统bitmap"></a>NTFS文件系统bitmap</h1><p><a href="https://blog.51cto.com/dengqi/1351300">NTFS文件系统详细介绍</a><br>只是备份的话，实际不需要了解那么清楚，只需要知道文件系统的位图信息即可知道，哪些扇区被使用了，只用备份这些扇区，$MFT的前16个文件记录总是元文件的，并且顺序是固定不变的</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/8.png" alt="NTFS"></p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/9.png" alt="找Bitmap"></p><ol><li>定位DBR，通过DBR可以得知$MFT的起始簇号及簇的大小。</li><li>定位$MFT，找到$MFT的后，在其中寻找Bitmap的文件记录，在6号文件记录。</li></ol><h1 id="镜像文件"><a href="#镜像文件" class="headerlink" title="镜像文件"></a>镜像文件</h1><p>读取分区的技巧： </p><p>[1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1        ]  </p><p>对于位图中这些连续的1，即连续使用的扇区可以一次读取多个扇区，而不是一个扇区一个扇区读取，减少读取次数。</p><p>将分区读取后按如下的的格式写入文件，即可得到分区的镜像文件:</p><p><img src="/2024/03/29/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%A4%87%E4%BB%BD/10.jpg" alt="镜像文件"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>读取MBR，找到要备份的分区表</li><li>如果是主分区直接定位到起始扇区</li><li>如果是扩展分区，还要通过拉链指针定位到扩展分区的起始扇区</li><li>通过DBR找到元数据$MFT的位置</li><li>寻找分区Bitmap，记录了哪些扇区被占用</li><li>将扇区读取后按如下的的格式写入镜像文件</li></ol><p>还原则使用相反的方式</p><p><a href="https://github.com/liuxinwei-hust/disk_backup">github virtual studio工程</a></p>]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>C++</tag>
      
      <tag>MBR</tag>
      
      <tag>DBR</tag>
      
      <tag>0号扇区</tag>
      
      <tag>分区表</tag>
      
      <tag>分区备份</tag>
      
      <tag>NTFS文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++随机数</title>
    <link href="/2024/03/28/C-%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2024/03/28/C-%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="真随机"><a href="#真随机" class="headerlink" title="真随机"></a>真随机</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-type">uint32_t</span> num = std::random_device&#123;&#125;();<br></code></pre></td></tr></table></figure><h1 id="伪随机"><a href="#伪随机" class="headerlink" title="伪随机"></a>伪随机</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">// 获取32位随机值</span><br><span class="hljs-function"><span class="hljs-type">static</span> std::mt19937 <span class="hljs-title">rand_gen_32</span><span class="hljs-params">(std::random_device&#123;&#125;())</span></span>;<br><span class="hljs-type">uint32_t</span> num = <span class="hljs-built_in">rand_gen_32</span>();<br><br><span class="hljs-comment">// 获取64位随机值</span><br><span class="hljs-function"><span class="hljs-type">static</span> std::mt19937_64 <span class="hljs-title">rand_gen_64</span><span class="hljs-params">(std::random_device&#123;&#125;())</span></span>;<br><span class="hljs-type">uint64_t</span> num = <span class="hljs-built_in">rand_gen_64</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++字符串切割</title>
    <link href="/2024/03/28/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2/"/>
    <url>/2024/03/28/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串切割"><a href="#字符串切割" class="headerlink" title="字符串切割"></a>字符串切割</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StringUtils::SplitString</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; source, <span class="hljs-type">const</span> std::string&amp; delimiter, std::vector&lt;std::string&gt;&amp; vec)</span> </span>&#123;<br>  <span class="hljs-type">size_t</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> index = source.<span class="hljs-built_in">find_first_of</span>(delimiter);<br>  <span class="hljs-keyword">while</span> (index != std::string::npos) &#123;<br>    vec.<span class="hljs-built_in">push_back</span>(source.<span class="hljs-built_in">substr</span>(last, index - last));<br>    last = index + <span class="hljs-number">1</span>;<br>    index = source.<span class="hljs-built_in">find_first_of</span>(delimiter, last);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (std::string::npos == index) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, source.<span class="hljs-built_in">length</span>() - last);<br>    <span class="hljs-keyword">if</span> (!strTmp.<span class="hljs-built_in">empty</span>()) &#123;<br>      vec.<span class="hljs-built_in">push_back</span>(strTmp);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串切割并删除空格"><a href="#字符串切割并删除空格" class="headerlink" title="字符串切割并删除空格"></a>字符串切割并删除空格</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StringUtils::SplitStringWithTrim</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; source,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      <span class="hljs-type">const</span> std::string&amp; delimiter,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      std::vector&lt;std::string&gt;&amp; vec)</span> </span>&#123;<br>  <span class="hljs-type">size_t</span> last = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> index = source.<span class="hljs-built_in">find_first_of</span>(delimiter);<br>  <span class="hljs-keyword">while</span> (index != std::string::npos) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, index - last);<br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">trim</span>(strTmp));<br>    last = index + <span class="hljs-number">1</span>;<br>    index = source.<span class="hljs-built_in">find_first_of</span>(delimiter, last);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (std::string::npos == index) &#123;<br>    std::string strTmp = source.<span class="hljs-built_in">substr</span>(last, source.<span class="hljs-built_in">length</span>() - last);<br>    <span class="hljs-keyword">if</span> (!strTmp.<span class="hljs-built_in">empty</span>()) &#123;<br>      vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">trim</span>(strTmp));<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// trim from begin</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">ltrim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123;<br>    s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>(), std::<span class="hljs-built_in">find_if</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">not1</span>(std::<span class="hljs-built_in">ptr_fun</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(std::isspace))));<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">// trim from end</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">rtrim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123;<br>    s.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">find_if</span>(s.<span class="hljs-built_in">rbegin</span>(), s.<span class="hljs-built_in">rend</span>(), std::<span class="hljs-built_in">not1</span>(std::<span class="hljs-built_in">ptr_fun</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(std::isspace))).<span class="hljs-built_in">base</span>(), s.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">// trim from both ends</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> std::string&amp; <span class="hljs-title">trim</span><span class="hljs-params">(std::string&amp; s)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ltrim</span>(<span class="hljs-built_in">rtrim</span>(s)); &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>字符串切割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++获取当前时间</title>
    <link href="/2024/03/28/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/2024/03/28/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="通过gettimeofday获取"><a href="#通过gettimeofday获取" class="headerlink" title="通过gettimeofday获取"></a>通过gettimeofday获取</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int64_t</span> <span class="hljs-title">GetCurrentMilliseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  timeval now;<br>  <span class="hljs-built_in">gettimeofday</span>(&amp;now, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">return</span> now.tv_sec * (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000</span> + now.tv_usec / (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int64_t</span> <span class="hljs-title">GetCurrentMicroseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  timeval now;<br>  <span class="hljs-built_in">gettimeofday</span>(&amp;now, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">return</span> now.tv_sec * (<span class="hljs-type">int64_t</span>)<span class="hljs-number">1000000</span> + now.tv_usec;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="通过std-chrono库获取"><a href="#通过std-chrono库获取" class="headerlink" title="通过std::chrono库获取"></a>通过std::chrono库获取</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">TimeUtils::GetCurrentMilliSeconds</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> current_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>();<br>  <span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(current_time).<span class="hljs-built_in">count</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">TimeUtils::GetCurrentMicroseconds</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> current_time = std::chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>();<br>  <span class="hljs-keyword">return</span> std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(current_time).<span class="hljs-built_in">count</span>();<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">TimeUtils::ToDateString</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> timestamp_ms)</span> </span>&#123;<br>  std::<span class="hljs-type">time_t</span> timestamp = timestamp_ms;<br>  std::stringstream string_stream;<br>  string_stream &lt;&lt; std::<span class="hljs-built_in">put_time</span>(std::<span class="hljs-built_in">localtime</span>(&amp;timestamp), <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>);<br>  <span class="hljs-keyword">return</span> string_stream.<span class="hljs-built_in">str</span>();<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">TimeUtils::ToDatetimeString</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> timestamp_ms)</span> </span>&#123;<br>  std::<span class="hljs-type">time_t</span> timestamp = timestamp_ms;<br>  std::stringstream string_stream;<br>  string_stream &lt;&lt; std::<span class="hljs-built_in">put_time</span>(std::<span class="hljs-built_in">localtime</span>(&amp;timestamp), <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>);<br>  <span class="hljs-keyword">return</span> string_stream.<span class="hljs-built_in">str</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>gettimeofday</tag>
      
      <tag>chrono</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++令牌桶</title>
    <link href="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
    <url>/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><p>最近做个benchmark工具往服务端压测数据，由于服务端的承载能力优先，需要限流进行平滑压测。打算使用令牌桶进行限流。 令牌桶算法以一个设定的速率产生令牌并放入令牌桶，每次用户请求都得申请令牌，如果令牌不足，则拒绝请求。</p><h1 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h1><p>令牌桶算法中新请求到来时会从桶里拿走一个令牌，如果桶内没有令牌可拿，就拒绝服务。当然，令牌的数量也是有上限的。令牌的数量与时间和发放速率强相关，时间流逝的时间越长，会不断往桶里加入越多的令牌，如果令牌发放的速度比申请速度快，令牌桶会放满令牌，直到令牌占满整个令牌桶，如图所示。</p><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/1.png" alt="令牌桶"></p><p>令牌桶限流大致的规则如下：</p><ol><li>进水口按照某个速度，向桶中放入令牌。</li><li>令牌的容量是固定的，但是放行的速度不是固定的，只要桶中还有剩余令牌，一旦请求过来就能申请成功，然后放行。</li><li>如果令牌的发放速度，慢于请求到来速度，桶内就无牌可领，请求就会被拒绝。</li></ol><p>总之，令牌的发送速率可以设置，从而可以对突发的出口流量进行有效的应对。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>比如压测QPS是10000</p><ol><li>那我们设置令牌总数为10000</li><li>每次发送时获取令牌,获取令牌失败，不可发送；获取成功，则令牌总数减一</li><li>每秒重置令牌总数为10000</li></ol><p>这样实现的是个最简单的令牌桶，但是这个令牌桶有个缺陷，如果发送请求不怎么耗时，那么客户端可能在1s的头1ms就将令牌耗尽，后面999ms没有令牌可用，仍然会造成后端流量的不平滑</p><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/2.jpg" alt="不到1s令牌耗尽"></p><h1 id="算法改进1"><a href="#算法改进1" class="headerlink" title="算法改进1"></a>算法改进1</h1><p>1s的时间间隔太久，我们可以将1s按1ms的窗口进行切割<br>比如压测QPS是10000</p><ol><li>将1s按1ms进行切割，1s分成1000个窗口，每个窗口的令牌数10个</li><li>每次发送时，获取令牌,获取令牌失败，不可发送；获取成功，则令牌总数减一</li><li>每过1ms，令牌总数加10</li></ol><p><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/3.jpg" alt="平滑发送"></p><h1 id="算法改进2"><a href="#算法改进2" class="headerlink" title="算法改进2"></a>算法改进2</h1><p>上面的算法有两个问题：</p><ol><li>如果设置的qps &lt; 1000, 1000个窗口，每个窗口不足1个令牌</li><li>如果设置的qps 是1999呢，除以1000个窗口等于1，余数却有999,每个窗口的令牌是1还是2呢？</li></ol><p>改进：</p><ol><li>如果qps小于等于1000，则将窗口数量设置为qps的大小，每个窗口一个令牌</li><li>如果qps &gt; 1000, 这里的策略是多发，比如1999除以1000个窗口,余数不为0,则先定每个窗口发送2个，同时也要记录已使用的令牌总数，保证1s的令牌总数不超过1999，这样即保证了平滑发送，也不会超过总数</li></ol><h1 id="单线程实现"><a href="#单线程实现" class="headerlink" title="单线程实现"></a>单线程实现</h1><p>实现结果：<br>qps设置为1999：<br><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/3.png" alt="qps限制"><br>1000个窗口，前999个每个窗口2个令牌，最后一个是1个令牌<br><img src="/2024/03/27/C-%E4%BB%A4%E7%89%8C%E6%A1%B6/4.png" alt="每个窗口的令牌数"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFAULT_WIN_SIZE 1000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Controller</span>() &#123;&#125;<br>  ~<span class="hljs-built_in">Controller</span>() &#123;&#125;<br><br>  <span class="hljs-comment">// 获取令牌</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CanSend</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (cur_us &gt;= m_win_begin_us_ + <span class="hljs-number">1000000LL</span>) &#123;<br>      <span class="hljs-built_in">Reset</span>(cur_us);<br>    &#125;<br><br>    <span class="hljs-comment">// 每个窗口大小 = 1000000LL / m_win_size_</span><br>    <span class="hljs-comment">// 当前落的窗口 = (cur_us - m_win_begin_us_) / 每个窗口大小</span><br>    <span class="hljs-type">int64_t</span> idx = (cur_us - m_win_begin_us_) * (<span class="hljs-type">int64_t</span>)m_win_size_ / <span class="hljs-number">1000000LL</span>;<br>    <span class="hljs-keyword">if</span> (idx &gt;= (<span class="hljs-type">int64_t</span>)m_win_size_ || idx &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 切换了窗口</span><br>    <span class="hljs-keyword">if</span> (idx != m_cur_win_idx_) &#123;<br>      m_cur_win_idx_ = idx;<br>      <span class="hljs-type">int32_t</span> left_token = m_speed_ - m_used_token_;<br>      <span class="hljs-type">int32_t</span> left_win_size = m_win_size_ - m_cur_win_idx_;<br>      m_cur_token_ = left_token / left_win_size;<br>      <span class="hljs-keyword">if</span> (left_token % left_win_size != <span class="hljs-number">0</span>) &#123;<br>        m_cur_token_++;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 令牌不足</span><br>    <span class="hljs-keyword">if</span> (m_cur_token_ &lt;= <span class="hljs-number">0</span> || m_used_token_ &gt;= m_speed_) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// success</span><br>    m_cur_token_--;<br>    m_used_token_++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 设置qps，方便在运行过程中调整qps</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetSpeed</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> speed, <span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    m_speed_ = speed;<br>    <span class="hljs-keyword">if</span> (m_speed_ &lt;= DEFAULT_WIN_SIZE) &#123;<br>      m_win_size_ = m_speed_;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      m_win_size_ = DEFAULT_WIN_SIZE;<br>    &#125;<br>    <span class="hljs-built_in">Reset</span>(cur_us);<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// 每s重置令牌桶,重划窗口</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reset</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> cur_us)</span> </span>&#123;<br>    m_win_begin_us_ = cur_us;<br>    m_cur_win_idx_ = <span class="hljs-number">0</span>;<br>    m_used_token_ = <span class="hljs-number">0</span>;<br>    m_cur_token_ = m_speed_ / m_win_size_;<br>    <span class="hljs-keyword">if</span> (m_speed_ % m_win_size_ != <span class="hljs-number">0</span>) &#123;<br>      m_cur_token_++;<br>    &#125;<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int32_t</span> m_speed_;       <span class="hljs-comment">// 配置的qps</span><br>  <span class="hljs-type">int32_t</span> m_cur_token_;   <span class="hljs-comment">// 当前可用令牌数</span><br>  <span class="hljs-type">int32_t</span> m_used_token_;  <span class="hljs-comment">//  已使用的令牌数</span><br><br>  <span class="hljs-type">int64_t</span> m_win_begin_us_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 窗口开始时间</span><br>  <span class="hljs-type">int32_t</span> m_cur_win_idx_;       <span class="hljs-comment">// 当前在的窗口编号</span><br>  <span class="hljs-type">int32_t</span> m_win_size_;          <span class="hljs-comment">// 1s分多少个窗口</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++代码库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>C++</tag>
      
      <tag>benchmark</tag>
      
      <tag>令牌桶</tag>
      
      <tag>压测</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
